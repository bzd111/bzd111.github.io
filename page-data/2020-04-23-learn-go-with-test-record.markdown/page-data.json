{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-04-23-learn-go-with-test-record.markdown/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc Redcarpet -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%AE%89%E8%A3%85-go\">安装 GO</a></li>\n<li><a href=\"#hello-world\">Hello, World</a></li>\n<li><a href=\"#iteration\">Iteration</a></li>\n<li><a href=\"#arrays-and-slices\">Arrays and slices</a>\n<ul>\n<li><a href=\"#%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\">简单使用</a></li>\n<li><a href=\"#%E5%88%87%E7%89%87%E5%86%85%E9%83%A8%E5%AE%9A%E4%B9%89\">切片内部定义</a></li>\n</ul>\n</li>\n<li><a href=\"#structs-methods-amp-interfaces\">Structs, methods &#x26; interfaces</a></li>\n<li><a href=\"#pointers-amp-errors\">Pointers &#x26; errors</a>\n<ul>\n<li><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-error\">自定义 error</a></li>\n<li><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B\">自定义类型</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D\">类型别名</a></li>\n</ul>\n</li>\n<li><a href=\"#maps\">Maps</a>\n<ul>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E5%AE%9A%E4%B9%89\">数组定义</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D\">类型别名</a></li>\n</ul>\n</li>\n<li><a href=\"#dependency-injection\">Dependency Injection</a></li>\n<li><a href=\"#mocking\">Mocking</a></li>\n<li><a href=\"#concurrency\">Concurrency</a>\n<ul>\n<li><a href=\"#race-detector\">race detector</a></li>\n</ul>\n</li>\n<li><a href=\"#select\">Select</a>\n<ul>\n<li><a href=\"#httptest-%E4%BD%BF%E7%94%A8\">httptest 使用</a></li>\n<li><a href=\"#select-%E4%BD%BF%E7%94%A8\">select 使用</a></li>\n</ul>\n</li>\n<li><a href=\"#reflection\">Reflection</a></li>\n<li><a href=\"#sync\">Sync</a></li>\n<li><a href=\"#context\">Context</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>之前看完了<a href=\"https://github.com/quii/learn-go-with-tests\">learn-go-with-tests</a>，现在稍微做点笔记记录一下</p>\n<h1 id=\"安装-go\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E8%A3%85-go\" aria-label=\"安装 go permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装 GO</h1>\n<ul>\n<li>\n<p>mac 电脑使用<code class=\"language-text\">brew install go</code></p>\n</li>\n<li>\n<p>环境变量 GOPATH</p>\n</li>\n<li>\n<p>GO module 使用</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir my-project\ncd my-project\ngo mod init &lt;modulepath></code></pre></div>\n</li>\n<li>\n<p>Go Edit 推荐 vscode(笔者喜欢用 vim)</p>\n</li>\n<li>\n<p>Go Debugger 推荐 dlv</p>\n<p>安装方法: <code class=\"language-text\">go get -u github.com/go-delve/delve/cmd/dlv</code></p>\n<p><a href=\"https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code\">使用 vscode debug</a></p>\n</li>\n<li>\n<p>Go Linting 推荐 golangci-lint</p>\n<p>安装方法: <code class=\"language-text\">go get -u github.com/golangci/golangci-lint/cmd/golangci-lint</code></p>\n</li>\n</ul>\n<h1 id=\"hello-world\" style=\"position:relative;\"><a href=\"#hello-world\" aria-label=\"hello world permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hello, World</h1>\n<ul>\n<li>\n<p>go 代码组成</p>\n<p>必须要有名为 main 的包</p>\n<p>必须要有名为 main 的 function</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">//必须要有名为main的包\npackage main\n\n// 导入的包\nimport &quot;fmt&quot;\n\n// 必须要有名为main的function\nfunc main() {\n    fmt.Println(&quot;Hello, world&quot;)\n}</code></pre></div>\n</li>\n<li>\n<p>go 测试代码组成</p>\n<p>文件名一般为 xxx_test.go</p>\n<p>测试函数必须以 Test 开头</p>\n<p>测试代码一般会放在一个 test 的文件下或和紧跟每一个功能文件，和它出现在一起</p>\n<p>测试函数参数只能是<code class=\"language-text\">t *testing.T</code></p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">package main\n\nimport &quot;testing&quot;\n\nfunc TestHello(t *testing.T) {\n    got := Hello()\n    want := &quot;Hello, world&quot;\n\n    if got != want {\n        t.Errorf(&quot;got %q want %q&quot;, got, want)\n    }\n}\n</code></pre></div>\n</li>\n<li>\n<p>子测试用例</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func TestHello(t *testing.T) {\n\n    assertCorrectMessage := func(t *testing.T, got, want string) {\n        t.Helper()\n        if got != want {\n            t.Errorf(&quot;got %q want %q&quot;, got, want)\n        }\n    }\n\n    t.Run(&quot;saying hello to people&quot;, func(t *testing.T) {\n        got := Hello(&quot;Chris&quot;)\n        want := &quot;Hello, Chris&quot;\n        assertCorrectMessage(t, got, want)\n    })\n\n    t.Run(&quot;empty string defaults to &#39;World&#39;&quot;, func(t *testing.T) {\n        got := Hello(&quot;&quot;)\n        want := &quot;Hello, World&quot;\n        assertCorrectMessage(t, got, want)\n    })\n\n    }</code></pre></div>\n</li>\n<li>\n<p>运行测试用例\n<code class=\"language-text\">go test</code></p>\n</li>\n<li>\n<p>性能测试</p>\n<p><code class=\"language-text\">go test -bench=.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">const repeatCount = 5\n\nfunc Repeat(character string) string {\n    var repeated string\n    for i := 0; i &lt; repeatCount; i++ {\n        repeated += character\n    }\n    return repeated\n}\n\nfunc BenchmarkRepeat(b *testing.B) {\n    for i := 0; i &lt; b.N; i++ {\n        Repeat(&quot;a&quot;)\n    }\n}</code></pre></div>\n<p>指定测试的 N 的大小，cpu 核数</p>\n<p><code class=\"language-text\">go test -benchmem -test.count=3 -test.cpu=1 -test.benchtime=1s .</code></p>\n</li>\n<li>\n<p>if 语法</p>\n<p>if 除了简单进行布尔运算时，还能在 if 语句中求职，然后再拿运算的值去做布尔运算</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">  func Hello(name string, language string) string {\n      if name == &quot;&quot; {\n          name = &quot;World&quot;\n      }\n\n      if language == spanish {\n          return spanishHelloPrefix + name\n      }\n\n      if language == french {\n          return frenchHelloPrefix + name\n      }\n\n      return englishHelloPrefix + name\n  }</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">package main\n\nimport &quot;testing&quot;\n\nfunc TestSum(t \\*testing.T) {\n\n    numbers := [5]int{1, 2, 3, 4, 5}\n\n    want := 15\n\n    if got:=Sum(numbers); got != want {\n        t.Errorf(&quot;got %d want %d given, %v&quot;, got, want, numbers)\n    }\n\n}\n</code></pre></div>\n</li>\n<li>\n<p>const</p>\n<p><code class=\"language-text\">const spanish = \"Spanish\"</code></p>\n</li>\n<li>\n<p>switch 语法</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func greetingPrefix(language string) (prefix string) {\n  switch language {\n  case french:\n      prefix = frenchHelloPrefix\n  case spanish:\n      prefix = spanishHelloPrefix\n  default:\n      prefix = englishHelloPrefix\n  }\n  return\n  }</code></pre></div>\n</li>\n</ul>\n<h1 id=\"iteration\" style=\"position:relative;\"><a href=\"#iteration\" aria-label=\"iteration permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iteration</h1>\n<p>go 只有 for，没有其他语言的 while、do、until。</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">const repeatCount = 5\n\nfunc Repeat(character string) string {\n    var repeated string\n    for i := 0; i &lt; repeatCount; i++ {\n        repeated += character\n    }\n    return repeated\n}</code></pre></div>\n<p>类似 while 使用</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n    sum := 1\n    for sum &lt; 1000 {\n        sum += sum\n    }\n    fmt.Println(sum)\n}</code></pre></div>\n<h1 id=\"arrays-and-slices\" style=\"position:relative;\"><a href=\"#arrays-and-slices\" aria-label=\"arrays and slices permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Arrays and slices</h1>\n<h2 id=\"简单使用\" style=\"position:relative;\"><a href=\"#%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\" aria-label=\"简单使用 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简单使用</h2>\n<p>array 数组 slices 切片</p>\n<p>数组定义：numbers := [5]int{1, 2, 3, 4, 5}</p>\n<p>切片定义：numbers := [5]int{1, 2, 3, 4, 5} or make([]int, 0, 5)</p>\n<p>make 第二参数是 len(长度)，第三个参数是 cap(容量)</p>\n<p>数组是定长的，切片可以在运行是改变长度，如果长度超过容量，会创建新的切片</p>\n<p>切片需要使用<code class=\"language-text\">reflect.DeepEqual</code>进行判等</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\"> func TestSumAll(t *testing.T) {\n\n    got := SumAll([]int{1,2}, []int{0,9})\n    want := []int{3, 9}\n\n    if !reflect.DeepEqual(got, want) {\n        t.Errorf(&quot;got %v want %v&quot;, got, want)\n    }\n}</code></pre></div>\n<h2 id=\"切片内部定义\" style=\"position:relative;\"><a href=\"#%E5%88%87%E7%89%87%E5%86%85%E9%83%A8%E5%AE%9A%E4%B9%89\" aria-label=\"切片内部定义 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>切片内部定义</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">type SliceHeader struct {\n\tData uintptr // 连续的内存的空间，\n\tLen  int // 长度\n\tCap  int // 容量\n}</code></pre></div>\n<h1 id=\"structs-methods--interfaces\" style=\"position:relative;\"><a href=\"#structs-methods--interfaces\" aria-label=\"structs methods  interfaces permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structs, methods &#x26; interfaces</h1>\n<p>Go 语言中接口的实现都是隐式的</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">// 结构体\ntype Rectangle struct {\nWidth float64\nHeight float64\n}\n\n// methods\n// 值接收者\nfunc (r Rectangle) Area() float64 {\nreturn 0\n}\n\n// 指针接收者\nfunc (r \\*Rectangle) SetWidth(width float64) {\nr.Width = width\n}\n\n// interface\ntype Shape interface {\nArea() float64\n</code></pre></div>\n<p>结构体初始化的变量不能调用指针接受者实现的 method</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">结构体实现的接口</th>\n<th align=\"center\">结构体指针实现的接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">结构体初始化的变量</td>\n<td align=\"center\">可以</td>\n<td align=\"center\">不可以</td>\n</tr>\n<tr>\n<td align=\"center\">结构体指针初始化的变量</td>\n<td align=\"center\">可以</td>\n<td align=\"center\">可以</td>\n</tr>\n</tbody>\n</table>\n<p>接口可用在变量申明、函数入参、函数返回值，解释器会在编译期进行类型检查</p>\n<p>可以看下这个例子<a href=\"https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-interface/#%E9%9A%90%E5%BC%8F%E6%8E%A5%E5%8F%A3\">https://draveness.me/golang/docs/part2-foundation/ch04-basic/golang-interface/#%E9%9A%90%E5%BC%8F%E6%8E%A5%E5%8F%A3</a></p>\n<h1 id=\"pointers--errors\" style=\"position:relative;\"><a href=\"#pointers--errors\" aria-label=\"pointers  errors permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pointers &#x26; errors</h1>\n<p>go 里面，函数和方法都是值拷贝。所以需要修改结构体的值时，需要使用指针。\n<code class=\"language-text\">In Go, when you call a function or a method the arguments are copied.</code></p>\n<p>指针可以是 nil</p>\n<h2 id=\"自定义-error\" style=\"position:relative;\"><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-error\" aria-label=\"自定义 error permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自定义 error</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">// 返回一个error的接口值\nvar ErrInsufficientFunds = errors.New(&quot;cannot withdraw, insufficient funds&quot;)</code></pre></div>\n<p>github.com/kisielk/errcheck 检查 Unchecked errors</p>\n<h2 id=\"自定义类型\" style=\"position:relative;\"><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B\" aria-label=\"自定义类型 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自定义类型</h2>\n<p>好处：\n1、可以实现接口\n2、给类型添加更多有意义的值</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">type Bitcoin int\n\n// 打印时添加BTC，\nfunc (b Bitcoin) String() string {\n    return fmt.Sprintf(&quot;%d BTC&quot;, b)\n}</code></pre></div>\n<h2 id=\"类型别名\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D\" aria-label=\"类型别名 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型别名</h2>\n<p>两个类型是等价的</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">type T1 = int</code></pre></div>\n<h1 id=\"maps\" style=\"position:relative;\"><a href=\"#maps\" aria-label=\"maps permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Maps</h1>\n<h2 id=\"数组定义\" style=\"position:relative;\"><a href=\"#%E6%95%B0%E7%BB%84%E5%AE%9A%E4%B9%89\" aria-label=\"数组定义 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数组定义</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var dictionary = map[string]string{}\nvar dictionary = make(map[string]string)\n// make 的作用是初始化内置的数据结构，也就是我们在前面提到的切片、哈希表和 Channel\n// new 的作用是根据传入的类型在堆上分配一片内存空间并返回指向这片内存空间的指针</code></pre></div>\n<h2 id=\"类型别名-1\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D-1\" aria-label=\"类型别名 1 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型别名</h2>\n<p>类型别名，<code class=\"language-text\">type Dictionary map[string]string</code>，定义 Dictionary，然后写一些 method</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var ErrNotFound = errors.New(\"could not find the word you were looking for\")\nvar ErrWordExists = errors.New(\"cannot add word because it already exists\")\nvar ErrWordDoesNotExist = DictionaryErr(\"cannot update word because it does not exist\")\n\n\nfunc (d Dictionary) Search(word string) (string, error) {\n    definition, ok := d[word]\n    if !ok {\n        return \"\", ErrNotFound\n    }\n\n    return definition, nil\n}\n\nfunc (d Dictionary) Add(word, definition string) error {\n    _, err := d.Search(word)\n\n    switch err {\n    case ErrNotFound:\n        d[word] = definition\n    case nil:\n        return ErrWordExists\n    default:\n        return err\n    }\n\n    return nil\n}\n\nfunc (d Dictionary) Update(word, definition string) error {\n    _, err := d.Search(word)\n\n    switch err {\n    case ErrNotFound:\n        return ErrWordDoesNotExist\n    case nil:\n        d[word] = definition\n    default:\n        return err\n    }\n\n    return nil\n}\n\nfunc (d Dictionary) Delete(word string) {\n    // 删除不存在的key，不会有错误\n    delete(d, word)\n}\n</code></pre></div>\n<h1 id=\"dependency-injection\" style=\"position:relative;\"><a href=\"#dependency-injection\" aria-label=\"dependency injection permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependency Injection</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/Dependency_injection\">依赖注入</a>，依赖是调用对象 A 需要 B(参数、函数)，注入是把对象 A 需要的单独分开 B 传给它，</p>\n<p>业务代码</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n)\n\n// Greet sends a personalised greeting to writer\nfunc Greet(writer io.Writer, name string) {\n\tfmt.Fprintf(writer, \"Hello, %s\", name)\n}\n\n// MyGreeterHandler says Hello, world over HTTP\nfunc MyGreeterHandler(w http.ResponseWriter, r *http.Request) {\n\tGreet(w, \"world\")\n}\n\nfunc main() {\n\terr := http.ListenAndServe(\":5000\", http.HandlerFunc(MyGreeterHandler))\n\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}</code></pre></div>\n<p>测试代码</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package main\n\nimport (\n\t\"bytes\"\n\t\"testing\"\n)\n\nfunc TestGreet(t *testing.T) {\n\tbuffer := bytes.Buffer{}\n\tGreet(&amp;buffer, \"Chris\")\n\n\tgot := buffer.String()\n\twant := \"Hello, Chris\"\n\n\tif got != want {\n\t\tt.Errorf(\"got %q want %q\", got, want)\n\t}\n}</code></pre></div>\n<p>fmt.Fprintf 接受 io.Writer 接口，然后测试代码中的 bytes.Buffer 也实现了同样的接口，所以测试代码不需要使用 httptest 来测试\ngreeting 函数依赖 io.Writer，然后我们通过把 bytes.Buffer 注入。</p>\n<h1 id=\"mocking\" style=\"position:relative;\"><a href=\"#mocking\" aria-label=\"mocking permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mocking</h1>\n<p>Mock 和 Dependency Injection 有点像，这里就不赘述了</p>\n<h1 id=\"concurrency\" style=\"position:relative;\"><a href=\"#concurrency\" aria-label=\"concurrency permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concurrency</h1>\n<p>这里使用 chan 来实现并发</p>\n<p>这个函数是用来请求 url，然后判断响应的状态</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package concurrency\n\nimport \"net/http\"\n\n// CheckWebsite returns true if the URL returns a 200 status code, false otherwise\nfunc CheckWebsite(url string) bool {\n\tresponse, err := http.Head(url)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\tif response.StatusCode != http.StatusOK {\n\t\treturn false\n\t}\n\n\treturn true\n}</code></pre></div>\n<p>这个文件是用来遍历，调用 CheckkWebsite 函数的，然后把结果送到 chan 里</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">package concurrency\n\ntype WebsiteChecker func(string) bool\ntype result struct {\n    string\n    bool\n}\n\n\n\nfunc CheckWebsites(wc WebsiteChecker, urls []string) map[string]bool {\n    results := make(map[string]bool)\n    resultChannel := make(chan result)\n\n    for _, url := range urls {\n        go func(u string) {\n            resultChannel &lt;- result{u, wc(u)}\n        }(url)\n    }\n\n    for i := 0; i &lt; len(urls); i++ {\n        result := &lt;-resultChannel\n        results[result.string] = result.bool\n    }\n\n    return results\n}</code></pre></div>\n<p>chan 通道，如果读数据时，chan 的 recvq，是空的话，那么读会阻塞。如果写数据时，chan 的 sendq，是满的话，那么也写会阻塞</p>\n<h2 id=\"race-detector\" style=\"position:relative;\"><a href=\"#race-detector\" aria-label=\"race detector permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>race detector</h2>\n<p>跑 benchmark 的时候，多个协程读写 map，会产生<code class=\"language-text\">fatal error: concurrent map writes</code>错误，所以跑 benchmark 的时候，需要使用<code class=\"language-text\">go test -race</code></p>\n<h1 id=\"select\" style=\"position:relative;\"><a href=\"#select\" aria-label=\"select permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Select</h1>\n<h2 id=\"httptest-使用\" style=\"position:relative;\"><a href=\"#httptest-%E4%BD%BF%E7%94%A8\" aria-label=\"httptest 使用 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>httptest 使用</h2>\n<p>httptest 使用</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">// 定义一个server，然后放入一个handlerFunc，\nslowserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\ttime.Sleep(delay)\n\t\tw.WriteHeader(http.StatusOK)\n\t}))\n// 请求的URL\nslowURL := slowServer.URL</code></pre></div>\n<h2 id=\"select-使用\" style=\"position:relative;\"><a href=\"#select-%E4%BD%BF%E7%94%A8\" aria-label=\"select 使用 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>select 使用</h2>\n<p>select 可以等待多个 chan，使用 time.After 防止一直阻塞</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func ping(url string) chan struct{} {\n    // 这里使用struct{}作为通道的值，因为struct{}占用的内存最少\n    ch := make(chan struct{})\n    go func() {\n        http.Get(url)\n        close(ch)\n    }()\n    return ch\n}\n\nfunc Racer(a, b string, timeout time.Duration) (winner string, error error) {\n    select {\n    case &lt;-ping(a):\n        return a, nil\n    case &lt;-ping(b):\n        return b, nil\n    case &lt;-time.After(timeout):\n        // 如果超时了，会返回一个错误\n        return &quot;&quot;, fmt.Errorf(&quot;timed out waiting for %s and %s&quot;, a, b)\n    }\n}</code></pre></div>\n<h1 id=\"reflection\" style=\"position:relative;\"><a href=\"#reflection\" aria-label=\"reflection permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reflection</h1>\n<p>当使用 interface{}作为参数的时候，需要使用 reflect 获取它的实际类型，\nreflect.ValueOf()返回一个 Value 的结构体，然后用 Kind 确定它的类型，再通过 Value.方法可以拿到值了</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func walk(x interface{}, fn func(input string)) {\n\tval := getValue(x)\n\n\tvar getField func(int) reflect.Value\n\n\tswitch val.Kind() {\n\tcase reflect.String:\n\t\tfn(val.String())\n\tcase reflect.Struct:\n\t\tnumberOfValues = val.NumField()\n\t\tgetField = val.Field\n\tcase reflect.Slice, reflect.Array:\n\t\tnumberOfValues = val.Len()\n\t\tgetField = val.Index\n\tcase reflect.Map:\n\t\tfor _, key := range val.MapKeys() {\n\t\t\twalk(val.MapIndex(key).Interface(), fn)\n\t\t}\n\tcase reflect.Chan:\n\t\tfor v, ok := val.Recv(); ok; v, ok = val.Recv() {\n\t\t\twalk(v.Interface(), fn)\n\t\t}\n\tcase reflect.Func:\n\t\tvalFnResult := val.Call(nil)\n\t\tfor _, res := range valFnResult {\n\t\t\twalk(res.Interface(), fn)\n\t\t}\n\t}\n}\n\nfunc getValue(x interface{}) reflect.Value {\n\tval := reflect.ValueOf(x)\n\n    // 指针需要使用Elem来获取值\n\tif val.Kind() == reflect.Ptr {\n\t\tval = val.Elem()\n\t}\n\n\treturn val\n}</code></pre></div>\n<h1 id=\"sync\" style=\"position:relative;\"><a href=\"#sync\" aria-label=\"sync permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sync</h1>\n<ul>\n<li><code class=\"language-text\">Mutex</code> 允许我们给数据加锁</li>\n<li><code class=\"language-text\">Waitgroup</code> 等待 goroutines 完成 jobs</li>\n</ul>\n<p>把 sync.Mutex 放到结构体里，然后更新数据的时候，先 Lock 仔 Unlock，</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">package v1\n\nimport &quot;sync&quot;\n\ntype Counter struct {\n\tmu    sync.Mutex\n\tvalue int\n}\n\nfunc NewCounter() *Counter {\n\treturn &amp;Counter{}\n}\n\nfunc (c *Counter) Inc() {\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tc.value++\n}\n\nfunc (c *Counter) Value() int {\n\treturn c.value\n}\n\nfunc sync(){\n\n    wantedCount := 1000\n    counter := NewCounter()\n\n    var wg sync.WaitGroup\n    // 定义WaitGroup\n    wg.Add(wantedCount)\n    // 设置job数量\n    for i := 0; i &lt; wantedCount; i++ {\n        go func(w *sync.WaitGroup) {\n            counter.Inc()\n            w.Done()\n            // 任务完成\n        }(&amp;wg) // 需要传入wg\n    }\n    wg.Wait()\n    // 等待所有任务完成\n}</code></pre></div>\n<p>sync.WaitGroup 结构体有个 noCopy 对象，这个对象不允许拷贝，所以需要用指针值，\n用 channels 传递数据\n用 mutex 管理状态</p>\n<h1 id=\"context\" style=\"position:relative;\"><a href=\"#context\" aria-label=\"context permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Context</h1>\n<p>context 用来管理协程运行，contextd 只要有 5 个方法</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">Background() Context // 根节点\nWithCancel(parent Context) (ctx Context, cancel CancelFunc)\nWithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)\nWithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\nWithValue(parent Context, key interface{}, val interface{}) Context</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">ctx, cancel := context.WithCancel(context.Background())\ncancel()  // 终止 context</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">package context3\n\nimport (\n    &quot;context&quot;\n    &quot;errors&quot;\n    &quot;net/http&quot;\n    &quot;testing&quot;\n    &quot;time&quot;\n)\nfunc (s *SpyStore) Fetch(ctx context.Context) (string, error) {\n    data := make(chan string, 1)\n\n    go func() {\n        var result string\n        for _, c := range s.response {\n            select {\n            // 如果context被取消就会走到这个case\n            case &lt;-ctx.Done():\n                s.t.Log(&quot;spy store got cancelled&quot;)\n                return\n            default:\n                time.Sleep(10 * time.Millisecond)\n                result += string(c)\n            }\n        }\n        data &lt;- result\n    }()\n\n    select {\n    case &lt;-ctx.Done():\n        return &quot;&quot;, ctx.Err()\n    case res := &lt;-data:\n        return res, nil\n    }\n}</code></pre></div>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://github.com/quii/learn-go-with-tests/\">https://github.com/quii/learn-go-with-tests/</a></li>\n<li><a href=\"https://blog.golang.org/slices-intro\">https://blog.golang.org/slices-intro</a></li>\n<li><a href=\"https://laisky.com/p/golang/\">https://laisky.com/p/golang/</a></li>\n<li><a href=\"https://draveness.me/golang/\">https://draveness.me/golang/</a></li>\n<li><a href=\"https://changkun.de/golang/\">https://changkun.de/golang/</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%89%E8%A3%85-go\">安装 GO</a></p>\n</li>\n<li>\n<p><a href=\"#hello-world\">Hello, World</a></p>\n</li>\n<li>\n<p><a href=\"#iteration\">Iteration</a></p>\n</li>\n<li>\n<p><a href=\"#arrays-and-slices\">Arrays and slices</a></p>\n<ul>\n<li><a href=\"#%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\">简单使用</a></li>\n<li><a href=\"#%E5%88%87%E7%89%87%E5%86%85%E9%83%A8%E5%AE%9A%E4%B9%89\">切片内部定义</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#structs-methods--interfaces\">Structs, methods &#x26; interfaces</a></p>\n</li>\n<li>\n<p><a href=\"#pointers--errors\">Pointers &#x26; errors</a></p>\n<ul>\n<li><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-error\">自定义 error</a></li>\n<li><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B\">自定义类型</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D\">类型别名</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#maps\">Maps</a></p>\n<ul>\n<li><a href=\"#%E6%95%B0%E7%BB%84%E5%AE%9A%E4%B9%89\">数组定义</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D-1\">类型别名</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dependency-injection\">Dependency Injection</a></p>\n</li>\n<li>\n<p><a href=\"#mocking\">Mocking</a></p>\n</li>\n<li>\n<p><a href=\"#concurrency\">Concurrency</a></p>\n<ul>\n<li><a href=\"#race-detector\">race detector</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#select\">Select</a></p>\n<ul>\n<li><a href=\"#httptest-%E4%BD%BF%E7%94%A8\">httptest 使用</a></li>\n<li><a href=\"#select-%E4%BD%BF%E7%94%A8\">select 使用</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reflection\">Reflection</a></p>\n</li>\n<li>\n<p><a href=\"#sync\">Sync</a></p>\n</li>\n<li>\n<p><a href=\"#context\">Context</a></p>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","frontmatter":{"title":"learn-go-with-test笔记","date":"2020-04-23"}}},"pageContext":{"slug":"/2020-04-23-learn-go-with-test-record.markdown"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}