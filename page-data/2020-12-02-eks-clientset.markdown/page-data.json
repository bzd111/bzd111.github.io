{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-12-02-eks-clientset.markdown/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc Redcarpet -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#aliyun\">aliyun</a></li>\n<li><a href=\"#aws\">aws</a>\n<ul>\n<li><a href=\"#aws-%E6%B7%BB%E5%8A%A0%E9%9B%86%E7%BE%A4-kubeconfig\">aws 添加集群 kubeconfig</a></li>\n<li><a href=\"#%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F\">认证方式</a>\n<ul>\n<li><a href=\"#bearer-token-%E8%AE%A4%E8%AF%81\">bearer token 认证</a></li>\n</ul>\n</li>\n<li><a href=\"#%E4%BD%BF%E7%94%A8-go-code-%E8%BF%9E%E6%8E%A5-eks\">使用 go code 连接 eks</a></li>\n</ul>\n</li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>aws 的认证方式和 aliyun 的不同，这里稍作记录\naws 使用 AWS IAM credentials\naliyun 采用客户端证书</p>\n<h1 id=\"aliyun\" style=\"position:relative;\"><a href=\"#aliyun\" aria-label=\"aliyun permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>aliyun</h1>\n<p>aliyun 只需要简单的把界面上提供的配置文件复制下来放到~/.kube 下即可\n主要信息是证书的公钥和私钥</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">users:\n- name: \"name\"\n  user:\n    client-certificate-data: ca-data\n    client-key-data: key-data\n</code></pre></div>\n<h1 id=\"aws\" style=\"position:relative;\"><a href=\"#aws\" aria-label=\"aws permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>aws</h1>\n<p>aws 页面上没有提供这样的文件，需要手动获取</p>\n<h2 id=\"aws-添加集群-kubeconfig\" style=\"position:relative;\"><a href=\"#aws-%E6%B7%BB%E5%8A%A0%E9%9B%86%E7%BE%A4-kubeconfig\" aria-label=\"aws 添加集群 kubeconfig permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>aws 添加集群 kubeconfig</h2>\n<p>1、安装 awscli，配置权限</p>\n<p><code class=\"language-text\">pip install --upgrade awscli</code> 这里采用简单的 pip 安装，是 v1 版本，推荐安装 v2 版本\n<code class=\"language-text\">aws configure</code> 按照提示输入</p>\n<p>2、修改 configmap 添加用户</p>\n<p><code class=\"language-text\">kubectl edit cm aws-auth -n kube-system</code> 照葫芦画瓢，添加用户，用户名可以通过<code class=\"language-text\">aws sts get-caller-identity</code> 获取</p>\n<p>3、生成 kubeconfig 文件</p>\n<p><code class=\"language-text\">aws eks get-token --cluster-name xxxxxx</code> 执行完这个，配置就出现~/.kube/config 里了</p>\n<p>初次看到这个可能有点懵，</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- name: arn:aws:eks:ap-south-1:620143331427:cluster/yaowei-test-cluster\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1alpha1\n      args:\n      - --region\n      - ap-south-1\n      - eks\n      - get-token\n      - --cluster-name\n      - cluster-name\n      command: aws\n      env: null</code></pre></div>\n<h2 id=\"认证方式\" style=\"position:relative;\"><a href=\"#%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F\" aria-label=\"认证方式 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>认证方式</h2>\n<h3 id=\"bearer-token-认证\" style=\"position:relative;\"><a href=\"#bearer-token-%E8%AE%A4%E8%AF%81\" aria-label=\"bearer token 认证 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bearer token 认证</h3>\n<p>当执行 kubectl 命令时，会执行配置文件中的 command，<code class=\"language-text\">aws --region ap-south-1 eks get-token --cluster-name cluster-name</code>，然后会返回一个 body 里含有 token 和过期时间(14 分钟)。</p>\n<p>执行命令时，会使用.aws 里的 AccessKeyId 和 SecretAccessKey，然后通过 aws sts client 加上 cluster name 去请求 token，然后按照以下格式返回。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ExecCredential\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"apiVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"client.authentication.k8s.io/v1alpha1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"spec\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"expirationTimestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2020-12-02T02:53:59Z\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"k8s-aws-v1.xxxx\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后可以通过 kubectl —token=k8s-aws-v1.xxxx get node 进行访问</p>\n<h2 id=\"使用-go-code-连接-eks\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E7%94%A8-go-code-%E8%BF%9E%E6%8E%A5-eks\" aria-label=\"使用 go code 连接 eks permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 go code 连接 eks</h2>\n<p>session 会读取~/.aws 下的配置文件，然后获取 token，放入到 kubeconfig 的配置连接里，方式和 aws 命令获取原理类似，</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">package main\n\nimport (\n\t&quot;encoding/base64&quot;\n\t&quot;log&quot;\n\n\t&quot;github.com/aws/aws-sdk-go/aws&quot;\n\t&quot;github.com/aws/aws-sdk-go/aws/session&quot;\n\n\t&quot;github.com/aws/aws-sdk-go/service/eks&quot;\n\tv1 &quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;\n\n\t&quot;k8s.io/client-go/kubernetes&quot;\n\t&quot;k8s.io/client-go/rest&quot;\n\n\t&quot;sigs.k8s.io/aws-iam-authenticator/pkg/token&quot;\n)\n\nfunc newClientset(cluster *eks.Cluster) (*kubernetes.Clientset, error) {\n\tgen, err := token.NewGenerator(true, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\topts := &amp;token.GetTokenOptions{\n\t\tClusterID: aws.StringValue(cluster.Name),\n\t}\n\ttok, err := gen.GetWithOptions(opts)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tca, err := base64.StdEncoding.DecodeString(aws.StringValue(cluster.CertificateAuthority.Data))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tclientset, err := kubernetes.NewForConfig(\n\t\t&amp;rest.Config{\n\t\t\tHost:        aws.StringValue(cluster.Endpoint),\n\t\t\tBearerToken: tok.Token,\n\t\t\tTLSClientConfig: rest.TLSClientConfig{\n\t\t\t\tCAData: ca,\n\t\t\t},\n\t\t},\n\t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn clientset, nil\n}\n\nfunc main() {\n\tname := &quot;cluster-name&quot;\n\tregion := &quot;ap-south-1&quot;\n\tsess := session.Must(session.NewSession(&amp;aws.Config{\n\t\tRegion: aws.String(region),\n\t}))\n\teksSvc := eks.New(sess)\n\n\tinput := &amp;eks.DescribeClusterInput{\n\t\tName: aws.String(name),\n\t}\n\tresult, err := eksSvc.DescribeCluster(input)\n\tif err != nil {\n\t\tlog.Fatalf(&quot;Error calling DescribeCluster: %v&quot;, err)\n\t}\n\tclientset, err := newClientset(result.Cluster)\n\tif err != nil {\n\t\tlog.Fatalf(&quot;Error creating clientset: %v&quot;, err)\n\t}\n\t// nodes, err := clientset.CoreV1().Pods().List(metav1.ListOptions{})\n\t// label := &quot;app=&quot; + &quot;video-provider&quot;\n\tlabel := &quot;app=&quot; + &quot;app-router&quot;\n\tpods, _ := clientset.CoreV1().Pods(&quot;default&quot;).List(v1.ListOptions{LabelSelector: label})\n\n\tif err != nil {\n\t\tlog.Fatalf(&quot;Error getting EKS nodes: %v&quot;, err)\n\t}\n\tlog.Printf(&quot;pods: %v&quot;, len(pods.Items))\n}\n</code></pre></div>\n<p>go.mod</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go 1.14\nrequire(\n    github.com/aws/aws-sdk-go v1.35.36\n    k8s.io/apimachinery v0.17.0\n    k8s.io/client-go v0.17.0\n    sigs.k8s.io/aws-iam-authenticator v0.5.2\n)</code></pre></div>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-install.html\">https://docs.aws.amazon.com/zh_cn/cli/latest/userguide/cli-chap-install.html</a></li>\n<li><a href=\"https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/\">https://kubernetes.io/zh/docs/reference/access-authn-authz/authentication/</a></li>\n<li><a href=\"https://github.com/aws/aws-cli/blob/08a7df3ff3/awscli/customizations/eks/get_token.py#L63\">https://github.com/aws/aws-cli/blob/08a7df3ff3/awscli/customizations/eks/get_token.py#L63</a></li>\n<li><a href=\"https://github.com/kubernetes-sigs/aws-iam-authenticator\">https://github.com/kubernetes-sigs/aws-iam-authenticator</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li>\n<p><a href=\"#aliyun\">aliyun</a></p>\n</li>\n<li>\n<p><a href=\"#aws\">aws</a></p>\n<ul>\n<li>\n<p><a href=\"#aws-%E6%B7%BB%E5%8A%A0%E9%9B%86%E7%BE%A4-kubeconfig\">aws 添加集群 kubeconfig</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F\">认证方式</a></p>\n<ul>\n<li><a href=\"#bearer-token-%E8%AE%A4%E8%AF%81\">bearer token 认证</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E4%BD%BF%E7%94%A8-go-code-%E8%BF%9E%E6%8E%A5-eks\">使用 go code 连接 eks</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","frontmatter":{"title":"aws eks 连接使用","date":"2020-12-02"}}},"pageContext":{"slug":"/2020-12-02-eks-clientset.markdown"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}