{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-11-26-heap.markdown/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc Redcarpet -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a>\n<ul>\n<li><a href=\"#%E8%A7%A3%E9%A2%98\">解题</a>\n<ul>\n<li><a href=\"#python-%E8%A7%A3%E6%B3%95\">python 解法</a></li>\n<li><a href=\"#go-%E8%A7%A3%E6%B3%95\">go 解法</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近刷题刷到<a href=\"https://leetcode.com/problems/kth-largest-element-in-an-array/\">215. Kth Largest Element in an Array</a>，找到数组中第 k 个最大的元素</p>\n<h2 id=\"解题\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E9%A2%98\" aria-label=\"解题 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解题</h2>\n<p>这个问题可以用<a href=\"https://en.wikipedia.org/wiki/Heap_(data_structure)\">堆</a>解决。堆其实是一棵二叉树，如果根节点大于所有节点，就叫最大堆，反之叫最小堆。</p>\n<p>可以用一个公式来表示，a[k]&#x3C;=a[2<em>k+1]，a[k]&#x3C;=a[2</em>k+2]，即第 k 个元素小于 2<em>k+1 个和 2</em>k+2 个，这是最小堆需要满足的条件，把小于改成大于就是最大堆了。</p>\n<p>堆常用来排序和实现优先级队列，优先级队列就是只用堆有序的特性实现，可以看到<a href=\"https://github.com/python/cpython/blob/3f5b9088b0ed08e1442cca37df78f609d5cd8c3c/Lib/queue.py#L220\">PriorityQueue 的实现</a></p>\n<h3 id=\"python-解法\" style=\"position:relative;\"><a href=\"#python-%E8%A7%A3%E6%B3%95\" aria-label=\"python 解法 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python 解法</h3>\n<p>python 默认提供<a href=\"https://github.com/python/cpython/blob/3f5b9088b0ed08e1442cca37df78f609d5cd8c3c/Lib/heapq.py\">堆</a>的数据结构实现</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>minheap<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>push<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>minheap<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>minheap<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>minheap<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n    k <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>findKthLargest<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 5</span>\n    s <span class=\"token operator\">=</span> Solution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n    k <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>findKthLargest<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span>\n</code></pre></div>\n<p>看源码可以看到 heappush、heappop 之后，会调用_siftup、_siftdown，这是用来保持数组有续的。\n其实它实现了最大堆、最小堆，只是最大堆用的下划线开头的函数，表示不想被外部调用。</p>\n<h3 id=\"go-解法\" style=\"position:relative;\"><a href=\"#go-%E8%A7%A3%E6%B3%95\" aria-label=\"go 解法 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>go 解法</h3>\n<p>go 提供了一个 container/heap，只需要实现<a href=\"https://golang.org/pkg/sort/#Interface\">Interface</a> Len、Swap、Less 这三个接口就可以，</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">package main\n\nimport (\n\t&quot;container/heap&quot;\n\t&quot;fmt&quot;\n)\n\ntype MaxHeaq []int\n\nfunc findKthLargest(nums []int, k int) int {\n\ttemp := MaxHeaq(nums)\n\th := &amp;temp\n\theap.Init(h)\n\tfor i := 1; i &lt; k; i++ {\n\t\theap.Remove(h, 0)\n\t}\n\treturn (*h)[0]\n}\n\nfunc (h MaxHeaq) Len() int {\n\treturn len(h)\n}\n\nfunc (h *MaxHeaq) Push(x interface{}) {\n\t*h = append(*h, x.(int))\n}\n\nfunc (h *MaxHeaq) Pop() interface{} {\n\tres := (*h)[len(*h)-1]\n\t*h = (*h)[0 : len(*h)-1]\n\treturn res\n}\n\nfunc (h MaxHeaq) Less(i, j int) bool {\n        // 最大堆，反之就是最小堆\n\treturn h[i] &gt; h[j]\n}\n\nfunc (h MaxHeaq) Swap(i, j int) {\n\th[i], h[j] = h[j], h[i]\n}\n\nfunc main() {\n\tnums := []int{3, 2, 1, 5, 6, 4}\n\tk := 2\n\tfmt.Println(findKthLargest(nums, k)) // 5\n\tnums = []int{3, 2, 3, 1, 2, 4, 5, 5, 6}\n\tk = 4\n\tfmt.Println(findKthLargest(nums, k)) //4\n}</code></pre></div>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://golang.org/pkg/container/heap/\">https://golang.org/pkg/container/heap/</a></li>\n<li><a href=\"https://docs.python.org/3/library/heapq.html\">https://docs.python.org/3/library/heapq.html</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n<ul>\n<li>\n<p><a href=\"#%E8%A7%A3%E9%A2%98\">解题</a></p>\n<ul>\n<li><a href=\"#python-%E8%A7%A3%E6%B3%95\">python 解法</a></li>\n<li><a href=\"#go-%E8%A7%A3%E6%B3%95\">go 解法</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","frontmatter":{"title":"leetcode 215.Kth Largest Element in an Array","date":"2019-11-26"}}},"pageContext":{"slug":"/2019-11-26-heap.markdown"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}