{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-12-16-docker-exit.markdown/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc Redcarpet -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#docker-stop\">Docker Stop</a>\n<ul>\n<li><a href=\"#%E4%BF%A1%E5%8F%B7\">信号</a></li>\n</ul>\n</li>\n<li><a href=\"#solve\">Solve</a>\n<ul>\n<li><a href=\"#%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BA%8F\">同步程序</a></li>\n<li><a href=\"#asyncio-%E5%BC%82%E6%AD%A5%E7%A8%8B%E5%BA%8F\">asyncio 异步程序</a></li>\n</ul>\n</li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>最近在服务器上部署了一个镜像，发现停止的时候很慢，需要 10 多妙。偶然看到一篇<a href=\"https://blog.opskumu.com/graceful-shutdown-docker.html\">文章</a></p>\n<h1 id=\"docker-stop\" style=\"position:relative;\"><a href=\"#docker-stop\" aria-label=\"docker stop permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Stop</h1>\n<p>docker stop 先会用信号 15(SIGTERM)去 kill，如果在指定超时时间内无法 kill，就会用信号 9(SIGKILL)去 kill。</p>\n<p>SIGTERM 和 SIGKILL 区别：\nSIGKILL 和 SIGTERM 都会终止进程，SIGTERM 会先清除临时文件、释放其它资源，然后再关闭进程，俗称优雅的退出进程。SIGKILL 是直接终止进程。</p>\n<h2 id=\"信号\" style=\"position:relative;\"><a href=\"#%E4%BF%A1%E5%8F%B7\" aria-label=\"信号 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>信号</h2>\n<p>摘自<code class=\"language-text\">man signal</code></p>\n<table>\n<thead>\n<tr>\n<th>No</th>\n<th align=\"center\">Name</th>\n<th align=\"center\">Default Action</th>\n<th align=\"center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td align=\"center\">SIGHUP</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">terminal line hangup</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\">SIGINT</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">interrupt program</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\">SIGQUIT</td>\n<td align=\"center\">create core image</td>\n<td align=\"center\">quit program</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"center\">SIGILL</td>\n<td align=\"center\">create core image</td>\n<td align=\"center\">illegal instruction</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\">SIGTRAP</td>\n<td align=\"center\">create core image</td>\n<td align=\"center\">trace trap</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\">SIGABRT</td>\n<td align=\"center\">create core image</td>\n<td align=\"center\">abort program (formerly SIGIOT)</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">SIGEMT</td>\n<td align=\"center\">create core image</td>\n<td align=\"center\">emulate instruction executed</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\">SIGFPE</td>\n<td align=\"center\">create core image</td>\n<td align=\"center\">floating-point exception</td>\n</tr>\n<tr>\n<td>9</td>\n<td align=\"center\">SIGKILL</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">kill program</td>\n</tr>\n<tr>\n<td>10</td>\n<td align=\"center\">SIGBUS</td>\n<td align=\"center\">create core image</td>\n<td align=\"center\">bus error</td>\n</tr>\n<tr>\n<td>11</td>\n<td align=\"center\">SIGSEGV</td>\n<td align=\"center\">create core image</td>\n<td align=\"center\">segmentation violation</td>\n</tr>\n<tr>\n<td>12</td>\n<td align=\"center\">SIGSYS</td>\n<td align=\"center\">create core image</td>\n<td align=\"center\">non-existent system call invoked</td>\n</tr>\n<tr>\n<td>13</td>\n<td align=\"center\">SIGPIPE</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">write on a pipe with no reader</td>\n</tr>\n<tr>\n<td>14</td>\n<td align=\"center\">SIGALRM</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">real-time timer expired</td>\n</tr>\n<tr>\n<td>15</td>\n<td align=\"center\">SIGTERM</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">software termination signal</td>\n</tr>\n<tr>\n<td>16</td>\n<td align=\"center\">SIGURG</td>\n<td align=\"center\">discard signal</td>\n<td align=\"center\">urgent condition present on socket</td>\n</tr>\n<tr>\n<td>17</td>\n<td align=\"center\">SIGSTOP</td>\n<td align=\"center\">stop process</td>\n<td align=\"center\">stop (cannot be caught or ignored)</td>\n</tr>\n<tr>\n<td>18</td>\n<td align=\"center\">SIGTSTP</td>\n<td align=\"center\">stop process</td>\n<td align=\"center\">stop signal generated from keyboard</td>\n</tr>\n<tr>\n<td>19</td>\n<td align=\"center\">SIGCONT</td>\n<td align=\"center\">discard signal</td>\n<td align=\"center\">continue after stop</td>\n</tr>\n<tr>\n<td>20</td>\n<td align=\"center\">SIGCHLD</td>\n<td align=\"center\">discard signal</td>\n<td align=\"center\">child status has changed</td>\n</tr>\n<tr>\n<td>21</td>\n<td align=\"center\">SIGTTIN</td>\n<td align=\"center\">stop process</td>\n<td align=\"center\">background read attempted from control terminal</td>\n</tr>\n<tr>\n<td>22</td>\n<td align=\"center\">SIGTTOU</td>\n<td align=\"center\">stop process</td>\n<td align=\"center\">background write attempted to control terminal</td>\n</tr>\n<tr>\n<td>23</td>\n<td align=\"center\">SIGIO</td>\n<td align=\"center\">discard signal</td>\n<td align=\"center\">I/O is possible on a descriptor (see fcntl(2))</td>\n</tr>\n<tr>\n<td>24</td>\n<td align=\"center\">SIGXCPU</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">cpu time limit exceeded (see setrlimit(2))</td>\n</tr>\n<tr>\n<td>25</td>\n<td align=\"center\">SIGXFSZ</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">file size limit exceeded (see setrlimit(2))</td>\n</tr>\n<tr>\n<td>26</td>\n<td align=\"center\">SIGVTALRM</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">virtual time alarm (see setitimer(2))</td>\n</tr>\n<tr>\n<td>27</td>\n<td align=\"center\">SIGPROF</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">profiling timer alarm (see setitimer(2))</td>\n</tr>\n<tr>\n<td>28</td>\n<td align=\"center\">SIGWINCH</td>\n<td align=\"center\">discard signal</td>\n<td align=\"center\">Window size change</td>\n</tr>\n<tr>\n<td>29</td>\n<td align=\"center\">SIGINFO</td>\n<td align=\"center\">discard signal</td>\n<td align=\"center\">status request from keyboard</td>\n</tr>\n<tr>\n<td>30</td>\n<td align=\"center\">SIGUSR1</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">User defined signal 1</td>\n</tr>\n<tr>\n<td>31</td>\n<td align=\"center\">SIGUSR2</td>\n<td align=\"center\">terminate process</td>\n<td align=\"center\">User defined signal 2</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"solve\" style=\"position:relative;\"><a href=\"#solve\" aria-label=\"solve permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solve</h1>\n<p>为程序添加 SIGTERM 信号处理。</p>\n<h2 id=\"同步程序\" style=\"position:relative;\"><a href=\"#%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BA%8F\" aria-label=\"同步程序 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>同步程序</h2>\n<p>只要使用 signal 模块注册一个信号处理事件就行。</p>\n<p>signal.signal 要传入两个参数。</p>\n<p>第一个参数是信号值，第二个是回调方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> signal\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> time\n\nexit <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">receive_signal</span><span class=\"token punctuation\">(</span>signum<span class=\"token punctuation\">,</span> stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> exit\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Received:'</span><span class=\"token punctuation\">,</span> signum<span class=\"token punctuation\">)</span>\n    exit <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n\nsignal<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span>SIGTERM<span class=\"token punctuation\">,</span> receive_signal<span class=\"token punctuation\">)</span>\nsignal<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span>SIGINT<span class=\"token punctuation\">,</span> receive_signal<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My PID is:'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> exit<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Waiting...'</span><span class=\"token punctuation\">)</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2 id=\"asyncio-异步程序\" style=\"position:relative;\"><a href=\"#asyncio-%E5%BC%82%E6%AD%A5%E7%A8%8B%E5%BA%8F\" aria-label=\"asyncio 异步程序 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>asyncio 异步程序</h2>\n<p>asyncio 的 eventloop 提供 add_signal_handler 方法，用法和 signal.signal 一样。</p>\n<p>这里展示了两种用法，第一种是通过偏函数传入参数，第二种是通过 ensure_future 将 handler_signal 放入 eventloop 里</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">import</span> functools\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> signal\n\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wait...'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">handle_signal</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loop close....'</span><span class=\"token punctuation\">)</span>\n    loop<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'My PID:'</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    loop<span class=\"token punctuation\">.</span>add_signal_handler<span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span>SIGTERM<span class=\"token punctuation\">,</span> functools<span class=\"token punctuation\">.</span>partial<span class=\"token punctuation\">(</span>handle_signal<span class=\"token punctuation\">,</span> loop<span class=\"token operator\">=</span>loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    loop<span class=\"token punctuation\">.</span>add_signal_handler<span class=\"token punctuation\">(</span>\n        signal<span class=\"token punctuation\">.</span>SIGINT<span class=\"token punctuation\">,</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> asyncio<span class=\"token punctuation\">.</span>ensure_future<span class=\"token punctuation\">(</span>handle_signal<span class=\"token punctuation\">(</span>loop<span class=\"token operator\">=</span>loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    asyncio<span class=\"token punctuation\">.</span>ensure_future<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    loop<span class=\"token punctuation\">.</span>run_forever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://pymotw.com/3/signal/index.html\">https://pymotw.com/3/signal/index.html</a></li>\n<li><a href=\"https://pymotw.com/3/asyncio/unix_signals.html\">https://pymotw.com/3/asyncio/unix_signals.html</a></li>\n<li><a href=\"https://blog.opskumu.com/graceful-shutdown-docker.html\">https://blog.opskumu.com/graceful-shutdown-docker.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/23313720/asyncio-how-can-coroutines-be-used-in-signal-handlers\">https://stackoverflow.com/questions/23313720/asyncio-how-can-coroutines-be-used-in-signal-handlers</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li>\n<p><a href=\"#docker-stop\">Docker Stop</a></p>\n<ul>\n<li><a href=\"#%E4%BF%A1%E5%8F%B7\">信号</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#solve\">Solve</a></p>\n<ul>\n<li><a href=\"#%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BA%8F\">同步程序</a></li>\n<li><a href=\"#asyncio-%E5%BC%82%E6%AD%A5%E7%A8%8B%E5%BA%8F\">asyncio 异步程序</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","frontmatter":{"title":"docker优雅退出","date":"2019-12-16T00:00:00.000Z"}}},"pageContext":{"slug":"/2019-12-16-docker-exit.markdown"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}