{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-03-29-data-structure-heap/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc Redcarpet -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%AE%9E%E7%8E%B0\">实现</a>\n<ul>\n<li><a href=\"#%E6%9C%80%E5%B0%8F%E5%A0%86\">最小堆</a>\n<ul>\n<li><a href=\"#method\">method</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%BA%94%E7%94%A8\">应用</a></li>\n</ul>\n</li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>结构是树(完全树)，存储结构是列表</p>\n<h1 id=\"实现\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0\" aria-label=\"实现 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h1>\n<h2 id=\"最小堆\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%B0%8F%E5%A0%86\" aria-label=\"最小堆 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最小堆</h2>\n<p>parent => children n=>2n+1,2n+2</p>\n<p>child => parent n => (n-1)/2</p>\n<h3 id=\"method\" style=\"position:relative;\"><a href=\"#method\" aria-label=\"method permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>method</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">▼+MinHeap : struct\n    [fields]\n   -data : []int\n    [methods]\n   -heapifyDown(index int)\n   -heapifyUp(index int)\n   -pop() : int\n   -push(item int)\n    [functions]\n   +NewMinHeap() : *MinHeap\n   +NewMinHeapFromSlice(data []int) : *MinHeap</code></pre></div>\n<p>结构体定义和初始化</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">type MinHeap struct {\n\tdata []int\n}\n\nfunc NewMinHeap() *MinHeap {\n\treturn &amp;MinHeap{}\n}</code></pre></div>\n<p>push\n把值放到最后，然后往上冒</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func (h *MinHeap) push(item int) {\n\th.data = append(h.data, item)\n\th.heapifyUp(len(h.data) - 1)\n}</code></pre></div>\n<p>heapifyUp</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func (h *MinHeap) heapifyUp(index int) {\n\tif index == 0 {\n\t\treturn\n\t}\n\tparent := (index - 1) / 2\n\tif h.data[index] &gt;= h.data[parent] {\n\t\treturn\n\t}\n\tswap(&amp;h.data[index], &amp;h.data[parent])\n\th.heapifyUp(parent)\n}</code></pre></div>\n<p>pop\n把最小值和最后一个值交换位子，然后往下沉</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func (h *MinHeap) pop() int {\n\th.data[0], h.data[len(h.data)-1] = h.data[len(h.data)-1], h.data[0]\n\tlast := h.data[len(h.data)-1]\n\th.data = h.data[:len(h.data)-1]\n\th.heapifyDown(0)\n\treturn last\n}</code></pre></div>\n<p>heapifyDown</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func (h *MinHeap) heapifyDown(index int) {\n\tsmallest := index\n\tfor i := 2*index + 1; i &lt;= 2*index+2; i++ {\n\t\tif i &lt; len(h.data) &amp;&amp; h.data[i] &lt; h.data[smallest] {\n\t\t\tsmallest = i\n\t\t}\n\t}\n\tif smallest == index {\n\t\treturn\n\t}\n\tswap(&amp;h.data[index], &amp;h.data[smallest])\n\th.heapifyDown(smallest)\n\n}\n</code></pre></div>\n<p>NewMinHeapFromSlice(data []int) // create a heap from a slice.</p>\n<p>对数组前一半的元素进行 heapifyDown，即可得到。</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func NewMinHeapFromSlice(data []int) *MinHeap {\n\th := NewMinHeap()\n\tn := len(data) - 1\n\th.data = data\n\tfor i := (n - 1) / 2; i &gt;= 0; i-- {\n\t\th.heapifyDown(i)\n\t}\n\treturn h\n}</code></pre></div>\n<h2 id=\"应用\" style=\"position:relative;\"><a href=\"#%E5%BA%94%E7%94%A8\" aria-label=\"应用 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>应用</h2>\n<p>Heapsort O(nlogn)</p>\n<p>Dijkstra’s algorithm</p>\n<p>Priority Queue</p>\n<p>Selection algorithm</p>\n<ul>\n<li>select top k elements among n</li>\n<li>sorting O(nlogn)</li>\n<li>Binary heap: O(n+klogn)</li>\n</ul>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=mnSMdTPBG1U\">https://www.youtube.com/watch?v=mnSMdTPBG1U</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9E%E7%8E%B0\">实现</a></p>\n<ul>\n<li>\n<p><a href=\"#%E6%9C%80%E5%B0%8F%E5%A0%86\">最小堆</a></p>\n<ul>\n<li><a href=\"#method\">method</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%BA%94%E7%94%A8\">应用</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","frontmatter":{"title":"数据结构之堆","date":"2021-03-29"}}},"pageContext":{"slug":"/2021-03-29-data-structure-heap"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}