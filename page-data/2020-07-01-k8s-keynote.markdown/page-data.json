{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-07-01-k8s-keynote.markdown/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc Redcarpet -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%AE%B9%E5%99%A8%E4%B8%8E%E9%95%9C%E5%83%8F\">容器与镜像</a></li>\n<li><a href=\"#k8s-%E6%A6%82%E5%BF%B5\">K8s 概念</a>\n<ul>\n<li><a href=\"#master\">Master</a></li>\n<li><a href=\"#node\">Node</a>\n<ul>\n<li><a href=\"#%E5%90%8D%E8%AF%8D%E8%A7%A3%E6%9E%90\">名词解析</a></li>\n<li><a href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\">常用操作</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\">核心概念</a>\n<ul>\n<li><a href=\"#pod\">Pod</a>\n<ul>\n<li><a href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\">常用操作</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n</ul>\n</li>\n<li><a href=\"#volume\">Volume</a>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n</ul>\n</li>\n<li><a href=\"#deployment\">Deployment</a>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n</ul>\n</li>\n<li><a href=\"#service\">Service</a>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n</ul>\n</li>\n<li><a href=\"#namespace\">Namespace</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>阿里云云原生技术公开课笔记和深入剖析 Kubernetes 笔记笔记</p>\n<h1 id=\"容器与镜像\" style=\"position:relative;\"><a href=\"#%E5%AE%B9%E5%99%A8%E4%B8%8E%E9%95%9C%E5%83%8F\" aria-label=\"容器与镜像 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>容器与镜像</h1>\n<p>容器是一个视图隔离、资源可限制、独立文件系统的进程集合</p>\n<p>镜像是容器运行时所需要的所有的文件集合称之为容器。</p>\n<p>Namespace 技术来实现进程在资源的视图上进行隔离,分离进程树、网络接口、挂载点以及进程间通信等资源的方法</p>\n<p>Cgroup 来限制其资源使用率,CPU 以及内存量</p>\n<p>UnionFS 为 Linux 操作系统设计的用于把多个文件系统『联合』到同一个挂载点的文件系统服务</p>\n<h1 id=\"k8s-概念\" style=\"position:relative;\"><a href=\"#k8s-%E6%A6%82%E5%BF%B5\" aria-label=\"k8s 概念 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>K8s 概念</h1>\n<h2 id=\"master\" style=\"position:relative;\"><a href=\"#master\" aria-label=\"master permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Master</h2>\n<ul>\n<li>\n<p>API Server：顾名思义是用来处理 API 操作的，Kubernetes 中所有的组件都会和 API Server 进行连接，组件与组件之间一般不进行独立的连接，都依赖于 API Server 进行消息的传送；</p>\n</li>\n<li>\n<p>Controller：是控制器，它用来完成对集群状态的一些管理。按照用户的期望状态在后台不断地调节整个集群中的对象，当服务的状态发生了改变，控制器就会发现这个改变并且开始向目标状态迁移；</p>\n</li>\n<li>\n<p>Scheduler：是调度器，“调度器”顾名思义就是完成调度的操作，对提交的 Pod，依据它对 CPU、对 memory 请求大小，找一台合适的节点，会在每次需要调度 Pod 时执行；</p>\n</li>\n<li>\n<p>etcd：是一个分布式的一个存储系统，API Server 中所需要的这些原信息都被放置在 etcd 中，etcd 本身是一个高可用系统，通过 raft 实现分布式一致性，通过 etcd 保证整个 Kubernetes 的 Master 组件的高可用性。</p>\n</li>\n</ul>\n<h2 id=\"node\" style=\"position:relative;\"><a href=\"#node\" aria-label=\"node permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node</h2>\n<h3 id=\"名词解析\" style=\"position:relative;\"><a href=\"#%E5%90%8D%E8%AF%8D%E8%A7%A3%E6%9E%90\" aria-label=\"名词解析 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>名词解析</h3>\n<ul>\n<li>\n<p>kubelet：周期性地从 API Server 接受新的或者修改的 Pod 规范，调用 Container runtime，来真正去启动配置这个容器和这个容器的运行环境，去调度 Storage Plugin 来去配置存储，network Plugin 去配置网络, 真正去运行这些 Pod 的组件</p>\n</li>\n<li>\n<p>Kube-proxy：利用 iptable 的能力来进行组建 Kubernetes 的 Network，在多个隔离的网络中把请求转发给正确的 Pod 或者容器</p>\n</li>\n<li>\n<p>Storage Plugin:</p>\n</li>\n<li>\n<p>Network Plugin:</p>\n</li>\n</ul>\n<h3 id=\"常用操作\" style=\"position:relative;\"><a href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\" aria-label=\"常用操作 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>常用操作</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 获取所有Node\nk get node</code></pre></div>\n<h2 id=\"核心概念\" style=\"position:relative;\"><a href=\"#%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\" aria-label=\"核心概念 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>核心概念</h2>\n<h3 id=\"pod\" style=\"position:relative;\"><a href=\"#pod\" aria-label=\"pod permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pod</h3>\n<p>Pod 是 Kubernetes 的一个最小调度以及资源单元,包含一个或多个容器，共享同一个网络环境。</p>\n<p>Pod Sandbox 是用来创建网络，</p>\n<p>EphemeralContainers 临时容器用来调试</p>\n<p>InitContainers 是当前 Pod 启动时需要首先执行的一系列容器，在容器启动时进行一些资源和依赖的初始化配置</p>\n<p>NormalContainers 是用户定义的容器</p>\n<p>容器启动过程：CreateContainer -> PreStart -> StartContainer -> PostStart</p>\n<p>容器停止过程：PreStop -> StopContainer -> PostStop</p>\n<h4 id=\"常用操作-1\" style=\"position:relative;\"><a href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-1\" aria-label=\"常用操作 1 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>常用操作</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 获取所有pod\nk get pod\n\n# 获取对应namespace下的pod\nk get pod -n namespace</code></pre></div>\n<h4 id=\"代码\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E7%A0%81\" aria-label=\"代码 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码</h4>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">type Pod struct {\n\tmetav1.TypeMeta `json:&quot;,inline&quot;`\n\tmetav1.ObjectMeta `json:&quot;metadata,omitempty&quot; protobuf:&quot;bytes,1,opt,name=metadata&quot;`\n\tSpec PodSpec `json:&quot;spec,omitempty&quot; protobuf:&quot;bytes,2,opt,name=spec&quot;`\n\tStatus PodStatus `json:&quot;status,omitempty&quot; protobuf:&quot;bytes,3,opt,name=status&quot;`\n}\n\ntype PodSpec struct {\n\tInitContainers []Container `json:&quot;initContainers,omitempty&quot; patchStrategy:&quot;merge&quot; patchMergeKey:&quot;name&quot; protobuf:&quot;bytes,20,rep,name=initContainers&quot;`\n\tContainers []Container `json:&quot;containers&quot; patchStrategy:&quot;merge&quot; patchMergeKey:&quot;name&quot; protobuf:&quot;bytes,2,rep,name=containers&quot;`\n\tRestartPolicy RestartPolicy `json:&quot;restartPolicy,omitempty&quot; protobuf:&quot;bytes,3,opt,name=restartPolicy,casttype=RestartPolicy&quot;`\n\t// ...\n}\n\ntype PodStatus struct {\n\tPhase PodPhase `json:&quot;phase,omitempty&quot; protobuf:&quot;bytes,1,opt,name=phase,casttype=PodPhase&quot;`\n\tConditions []PodCondition `json:&quot;conditions,omitempty&quot; patchStrategy:&quot;merge&quot; patchMergeKey:&quot;type&quot; protobuf:&quot;bytes,2,rep,name=conditions&quot;`\n\tMessage string `json:&quot;message,omitempty&quot; protobuf:&quot;bytes,3,opt,name=message&quot;`\n\tReason string `json:&quot;reason,omitempty&quot; protobuf:&quot;bytes,4,opt,name=reason&quot;`\n\tHostIP string `json:&quot;hostIP,omitempty&quot; protobuf:&quot;bytes,5,opt,name=hostIP&quot;`\n\tPodIP string `json:&quot;podIP,omitempty&quot; protobuf:&quot;bytes,6,opt,name=podIP&quot;`\n\tStartTime *metav1.Time `json:&quot;startTime,omitempty&quot; protobuf:&quot;bytes,7,opt,name=startTime&quot;`\n\tInitContainerStatuses []ContainerStatus `json:&quot;initContainerStatuses,omitempty&quot; protobuf:&quot;bytes,10,rep,name=initContainerStatuses&quot;`\n\tContainerStatuses []ContainerStatus `json:&quot;containerStatuses,omitempty&quot; protobuf:&quot;bytes,8,rep,name=containerStatuses&quot;`\n\t// ...\n}\n\n// https://github.com/kubernetes/kubernetes/blob/5ed7b1afb8958fe0d5ddd3660582add89ab9a372/pkg/kubelet/kuberuntime/kuberuntime_manager.go#L644\n// SyncPod syncs the running pod into the desired pod by executing following steps:\n//\n//  1. Compute sandbox and container changes.\n//  2. Kill pod sandbox if necessary.\n//  3. Kill any containers that should not be running.\n//  4. Create sandbox if necessary.\n//  5. Create ephemeral containers.\n//  6. Create init containers.\n//  7. Create normal containers.\nfunc (m *kubeGenericRuntimeManager) SyncPod(pod *v1.Pod, podStatus *kubecontainer.PodStatus, pullSecrets []v1.Secret, backOff *flowcontrol.Backoff) (result kubecontainer.PodSyncResult) {\n\n}\n</code></pre></div>\n<h3 id=\"volume\" style=\"position:relative;\"><a href=\"#volume\" aria-label=\"volume permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Volume</h3>\n<p>用来声明在 Pod 中的容器可以访问文件目录的，一个卷可以被挂载在 Pod 中一个或者多个容器的指定路径下面。</p>\n<p>通用挂载步骤：附着（Attach）、挂载（Mount）、卸载（Unmount）和分离（Detach）</p>\n<p>临时卷：常用的有 emptydir/hostpath, secret/configmap (用卷的形式挂载在容器中)，只需要 Mount 和 Unmount</p>\n<p>EmptyDir 类型的卷多个容器之间共享文件、充当缓存或者保留一些临时的日志 EmptyDir 类型的卷</p>\n<p>持久卷：PV 各家云厂商提供的云存储</p>\n<p>管理员定义 PV(PersistentVolume)，用户定义 PVC(PersistentVolumeClaim)，\n静态 Provisioning， PV 和 PVC 通过定义的 accessmode 和 stroage 的大小进行匹配，PV 需要提前创建好\n动态 Provisioning，PV 和 PVC 通过 StorageClass 进行绑定</p>\n<p>三种访问模式：</p>\n<ul>\n<li>ReadWriteOnce 表示当前卷可以被一个节点使用读写模式挂载；</li>\n<li>ReadOnlyMany 表示当前卷可以被多个节点使用只读模式挂载；</li>\n<li>ReadWriteMany 表示当前卷可以被多个节点使用读写模式挂载；</li>\n</ul>\n<p>三种回收策略：</p>\n<ul>\n<li>Retain 回收</li>\n<li>Delete 删除</li>\n<li>Dynamic Provisioning</li>\n</ul>\n<p>VolumeManager 负责卷的创建和管理的大部分工作，\nAttachDetachController 主要负责对集群中的卷进行 Attach 和 Detach，\nPVController 负责处理持久卷的变更</p>\n<p>DesiredStateOfWorldPopulator 负责更新节点的期望状态 DesiredStateOfWorld 生成数据\nReconciler 负责对当前节点上的 Volume 进行管理 从 ActualStateOfWorld 获取数据</p>\n<h4 id=\"代码-1\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E7%A0%81-1\" aria-label=\"代码 1 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码</h4>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func (dswp *desiredStateOfWorldPopulator) populatorLoop() {\n     dswp.findAndAddNewPods() // add volume\n\n    // findAndRemoveDeletedPods() calls out to the container runtime to\n    // determine if the containers for a given pod are terminated. This is\n    // an expensive operation, therefore we limit the rate that\n    // findAndRemoveDeletedPods() is called independently of the main\n    // populator loop.\n    if time.Since(dswp.timeOfLastGetPodStatus) &lt; dswp.getPodStatusRetryDuration {\n        klog.V(5).Infof(\n            &quot;Skipping findAndRemoveDeletedPods(). Not permitted until %v (getPodStatusRetryDuration %v).&quot;,\n            dswp.timeOfLastGetPodStatus.Add(dswp.getPodStatusRetryDuration),\n            dswp.getPodStatusRetryDuration)\n\n        return\n    }\n\n    dswp.findAndRemoveDeletedPods() // remove volume\n}</code></pre></div>\n<h3 id=\"deployment\" style=\"position:relative;\"><a href=\"#deployment\" aria-label=\"deployment permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deployment</h3>\n<p>Deployment 是在 Pod 这个抽象上更为上层的一个抽象，通常会创建 ReplicaSet 和 Pod</p>\n<p>Deployment 主要三个方法，sync(同步)、recreate(重新部署)、RollingUpdate(滚动更新)</p>\n<p>依赖关系</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Deployment-.->ReplicaSet\nReplicaSet-.->Pod1\nReplicaSet-.->Pod2\nReplicaSet-.->Pod3</code></pre></div>\n<p>DeploymentController 通过 Informer 监控 Pod、ReplicaSet 和 Deployment 的变动，</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">DI[DeploymentInformer]-. Add/Update/Delete .->DC[DeploymentController]\nReplicaSetInformer-. Add/Update/Delete .->DC\nPodInformer-. Delete .->DC</code></pre></div>\n<ul>\n<li>maxUnavailable 表示在更新过程中能够进入不可用状态的 Pod 的最大值；</li>\n<li>maxSurge 表示能够额外创建的 Pod 个数；</li>\n</ul>\n<h4 id=\"代码-2\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E7%A0%81-2\" aria-label=\"代码 2 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码</h4>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func (dc *DeploymentController) syncDeployment(key string) error {\n\tnamespace, name, _ := cache.SplitMetaNamespaceKey(key)\n\tdeployment, _ := dc.dLister.Deployments(namespace).Get(name)\n\n\td := deployment.DeepCopy()\n\n\trsList, _ := dc.getReplicaSetsForDeployment(d)\n\tpodMap, _ := dc.getPodMapForDeployment(d, rsList)\n\n\tdc.checkPausedConditions(d)\n\n\tif d.Spec.Paused {\n\t\treturn dc.sync(d, rsList)\n\t}\n\n\tscalingEvent, _ := dc.isScalingEvent(d, rsList)\n\tif scalingEvent {\n\t\treturn dc.sync(d, rsList)\n\t}\n\n\tswitch d.Spec.Strategy.Type {\n\tcase apps.RecreateDeploymentStrategyType:\n\t\treturn dc.rolloutRecreate(d, rsList, podMap)\n\tcase apps.RollingUpdateDeploymentStrategyType:\n\t\treturn dc.rolloutRolling(d, rsList)\n\t}\n\treturn fmt.Errorf(&quot;unexpected deployment strategy type: %s&quot;, d.Spec.Strategy.Type)\n}</code></pre></div>\n<h3 id=\"service\" style=\"position:relative;\"><a href=\"#service\" aria-label=\"service permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service</h3>\n<p>Service 提供了一个或者多个 Pod 实例的稳定访问地址。控制器创建 Endpoint 对象，kube-proxy 变更 iptables 或者 ipvs 的规则</p>\n<p>EndpointController 的作用，订阅 Pod 和 Service 对象的变更，并根据当前集群中的对象生成 Endpoint 对象将两者进行关联</p>\n<p>IPVS > IPTABLES > USERSPACE</p>\n<p>ipvs 支持负载均衡，使用哈希表进行底层数据存储</p>\n<h4 id=\"代码-3\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E7%A0%81-3\" aria-label=\"代码 3 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代码</h4>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">type Service struct {\n\tmetav1.TypeMeta `json:&quot;,inline&quot;`\n\tmetav1.ObjectMeta `json:&quot;metadata,omitempty&quot; protobuf:&quot;bytes,1,opt,name=metadata&quot;`\n\tSpec ServiceSpec `json:&quot;spec,omitempty&quot; protobuf:&quot;bytes,2,opt,name=spec&quot;`\n\tStatus ServiceStatus `json:&quot;status,omitempty&quot; protobuf:&quot;bytes,3,opt,name=status&quot;`\n}\n\ntype ServiceSpec struct {\n\tPorts []ServicePort `json:&quot;ports,omitempty&quot; patchStrategy:&quot;merge&quot; patchMergeKey:&quot;port&quot; protobuf:&quot;bytes,1,rep,name=ports&quot;`\n\tSelector map[string]string `json:&quot;selector,omitempty&quot; protobuf:&quot;bytes,2,rep,name=selector&quot;`\n\t// ...\n}\n\ntype ServiceStatus struct {\n\tLoadBalancer LoadBalancerStatus `json:&quot;loadBalancer,omitempty&quot; protobuf:&quot;bytes,1,opt,name=loadBalancer&quot;`\n}\n\ntype LoadBalancerStatus struct {\n\tIngress []LoadBalancerIngress `json:&quot;ingress,omitempty&quot; protobuf:&quot;bytes,1,rep,name=ingress&quot;`\n}\n\ntype LoadBalancerIngress struct {\n\tIP string `json:&quot;ip,omitempty&quot; protobuf:&quot;bytes,1,opt,name=ip&quot;`\n\tHostname string `json:&quot;hostname,omitempty&quot; protobuf:&quot;bytes,2,opt,name=hostname&quot;`\n}\n\n</code></pre></div>\n<p><a href=\"https://stackoverflow.com/questions/41509439/whats-the-difference-between-clusterip-nodeport-and-loadbalancer-service-types\">https://stackoverflow.com/questions/41509439/whats-the-difference-between-clusterip-nodeport-and-loadbalancer-service-types</a></p>\n<h3 id=\"namespace\" style=\"position:relative;\"><a href=\"#namespace\" aria-label=\"namespace permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Namespace</h3>\n<p>Namespace 是用来做一个集群内部的逻辑隔离的，它包括鉴权、资源管理等。</p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://edu.aliyun.com/roadmap/cloudnative\">https://edu.aliyun.com/roadmap/cloudnative</a></li>\n<li><a href=\"https://draveness.me/tags/kubernetes\">https://draveness.me/tags/kubernetes</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%B9%E5%99%A8%E4%B8%8E%E9%95%9C%E5%83%8F\">容器与镜像</a></p>\n</li>\n<li>\n<p><a href=\"#k8s-%E6%A6%82%E5%BF%B5\">K8s 概念</a></p>\n<ul>\n<li>\n<p><a href=\"#master\">Master</a></p>\n</li>\n<li>\n<p><a href=\"#node\">Node</a></p>\n<ul>\n<li><a href=\"#%E5%90%8D%E8%AF%8D%E8%A7%A3%E6%9E%90\">名词解析</a></li>\n<li><a href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\">常用操作</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5\">核心概念</a></p>\n<ul>\n<li>\n<p><a href=\"#pod\">Pod</a></p>\n<ul>\n<li><a href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-1\">常用操作</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81\">代码</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#volume\">Volume</a></p>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81-1\">代码</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#deployment\">Deployment</a></p>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81-2\">代码</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#service\">Service</a></p>\n<ul>\n<li><a href=\"#%E4%BB%A3%E7%A0%81-3\">代码</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#namespace\">Namespace</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","frontmatter":{"title":"[笔记]k8s学习笔记","date":"2020-07-01"}}},"pageContext":{"slug":"/2020-07-01-k8s-keynote.markdown"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}