{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-12-04-tortoise-and-hare-algorithm.markdown/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc Redcarpet -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E4%BB%8B%E7%BB%8D\">介绍</a>\n<ul>\n<li><a href=\"#%E8%AF%81%E6%98%8E\">证明</a>\n<ul>\n<li><a href=\"#%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E7%8E%AF\">是否存在环</a></li>\n<li><a href=\"#%E8%AE%A1%E7%AE%97%E7%8E%AF%E7%9A%84%E9%95%BF%E5%BA%A6\">计算环的长度</a></li>\n<li><a href=\"#%E8%AE%A1%E7%AE%97%E7%8E%AF%E7%9A%84%E8%B5%B7%E7%82%B9\">计算环的起点</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E9%A2%98\">题</a>\n<ul>\n<li><a href=\"#141-linked-list-cycle\">141. Linked List Cycle</a></li>\n<li><a href=\"#142-linked-list-cycle-ii\">142. Linked List Cycle II</a></li>\n<li><a href=\"#202-happy-number\">202. happy-number</a></li>\n<li><a href=\"#287-find-the-duplicate-number\">287. Find the Duplicate Number</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>之前在一个<a href=\"http://adam8157.info/blog/2015/08/why-does-tortoise-and-hare-algorithm-work/\">blog</a>，看到这个算法， 这里稍作整理。\n并且刷几道相关的题，巩固一下。</p>\n<h1 id=\"介绍\" style=\"position:relative;\"><a href=\"#%E4%BB%8B%E7%BB%8D\" aria-label=\"介绍 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>介绍</h1>\n<p>Floyd 判圈算法(Floyd Cycle Detection Algorithm)，又称龟兔赛跑算法(Tortoise and Hare Algorithm)，是一个可以在有限状态机、迭代函数或者链表上判断是否存在环，求出该环的起点与长度的算法。(摘自维基百科)</p>\n<h2 id=\"证明\" style=\"position:relative;\"><a href=\"#%E8%AF%81%E6%98%8E\" aria-label=\"证明 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>证明</h2>\n<p><img src=\"/assets/cycle.jpg\" alt=\"cycle\">\n起点 S，环长 L，相遇点 M。</p>\n<p>乌龟和兔子从起点出发，兔子每次走 2 步，乌龟每次走一步</p>\n<h3 id=\"是否存在环\" style=\"position:relative;\"><a href=\"#%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E7%8E%AF\" aria-label=\"是否存在环 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>是否存在环</h3>\n<p>兔子走 2 步，会走在前面，当单列表有环时，兔子会超乌龟 N 圈，追上乌龟，然后相遇。</p>\n<p>如果单列表没有环时，它们永远不会相遇。</p>\n<h3 id=\"计算环的长度\" style=\"position:relative;\"><a href=\"#%E8%AE%A1%E7%AE%97%E7%8E%AF%E7%9A%84%E9%95%BF%E5%BA%A6\" aria-label=\"计算环的长度 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计算环的长度</h3>\n<p>当乌龟和兔子相遇后，让兔子原地等待，乌龟再走一圈，走的步数就是环的长度</p>\n<h3 id=\"计算环的起点\" style=\"position:relative;\"><a href=\"#%E8%AE%A1%E7%AE%97%E7%8E%AF%E7%9A%84%E8%B5%B7%E7%82%B9\" aria-label=\"计算环的起点 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>计算环的起点</h3>\n<p>当乌龟和兔子相遇时，走了 T 步，兔子走了 X 圈，乌龟走了 Y 圈</p>\n<p>乌龟走过的长度</p>\n<p>1⃣️ T = S + YL + M</p>\n<p>兔子走过的长度</p>\n<p>2⃣️ 2T = S + XL + M</p>\n<p>两式相减得，T = (X - Y)L</p>\n<p>将 T 带入到 1⃣️ 中得，S + M = (X - 2Y)L</p>\n<p>S+M 的和，能被 L 和(X-2Y)整除，所以当 X-2Y 等于 1 时，S+M=L，S = L - M，当新的乌龟从起点出发，第一只乌龟从 M(相遇点)出发，两只乌龟会在环的起点相遇，</p>\n<p>当 S 等 0 时，单列表自身就是环，M 就是起点</p>\n<h1 id=\"题\" style=\"position:relative;\"><a href=\"#%E9%A2%98\" aria-label=\"题 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>题</h1>\n<p>题目均来自<a href=\"https://leetcode.com/\">Leetcode</a></p>\n<h2 id=\"141-linked-list-cycle\" style=\"position:relative;\"><a href=\"#141-linked-list-cycle\" aria-label=\"141 linked list cycle permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://leetcode.com/problems/linked-list-cycle/\">141. Linked List Cycle</a></h2>\n<p>判断单链表是否有环</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Definition for singly-linked list.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">hasCycle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        rabbit <span class=\"token operator\">=</span> head\n        turtle <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> rabbit <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> rabbit<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            rabbit <span class=\"token operator\">=</span> rabbit<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            turtle <span class=\"token operator\">=</span> turtle<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">if</span> rabbit <span class=\"token operator\">==</span> turtle<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<h2 id=\"142-linked-list-cycle-ii\" style=\"position:relative;\"><a href=\"#142-linked-list-cycle-ii\" aria-label=\"142 linked list cycle ii permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://leetcode.com/problems/linked-list-cycle-ii/\">142. Linked List Cycle II</a></h2>\n<p>求环的起点</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">detectCycle</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> ListNode<span class=\"token punctuation\">:</span>\n        rabbit <span class=\"token operator\">=</span> head\n        turtle <span class=\"token operator\">=</span> head\n        <span class=\"token keyword\">while</span> rabbit <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> rabbit<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            rabbit <span class=\"token operator\">=</span> rabbit<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            turtle <span class=\"token operator\">=</span> turtle<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n            <span class=\"token keyword\">if</span> rabbit <span class=\"token operator\">==</span> turtle<span class=\"token punctuation\">:</span>\n                repeat <span class=\"token operator\">=</span> head\n                <span class=\"token keyword\">while</span> turtle <span class=\"token operator\">!=</span> repeat<span class=\"token punctuation\">:</span>\n                    turtle <span class=\"token operator\">=</span> turtle<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                    repeat <span class=\"token operator\">=</span> repeat<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n                <span class=\"token keyword\">return</span> repeat\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>\n<h2 id=\"202-happy-number\" style=\"position:relative;\"><a href=\"#202-happy-number\" aria-label=\"202 happy number permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://leetcode.com/problems/happy-number/\">202. happy-number</a></h2>\n<p>计算一步 n 的每位数的平方和两部 n 的每位数的平方和是否一样</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">isHappy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n        slow <span class=\"token operator\">=</span> fast <span class=\"token operator\">=</span> n\n        slow <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span>\n        fast <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span>\n        fast <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> slow <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">:</span>\n            slow <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span>\n            fast <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span>\n            fast <span class=\"token operator\">=</span> calc<span class=\"token punctuation\">(</span>fast<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> slow <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        l <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n        <span class=\"token builtin\">sum</span> <span class=\"token operator\">+=</span> l <span class=\"token operator\">*</span> l\n        n <span class=\"token operator\">//=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span></code></pre></div>\n<h2 id=\"287-find-the-duplicate-number\" style=\"position:relative;\"><a href=\"#287-find-the-duplicate-number\" aria-label=\"287 find the duplicate number permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://leetcode.com/problems/find-the-duplicate-number/\">287. Find the Duplicate Number</a></h2>\n<p>通过找环起点的方式解决</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findDuplicate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        fast <span class=\"token operator\">=</span> slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        slow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span>\n        fast <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span>\n        fast <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> slow <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">:</span>\n            slow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span>\n            fast <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span>\n            fast <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span>\n        slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> slow <span class=\"token operator\">!=</span> fast<span class=\"token punctuation\">:</span>\n            slow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span>\n            fast <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> slow</code></pre></div>\n<h1 id=\"总结\" style=\"position:relative;\"><a href=\"#%E6%80%BB%E7%BB%93\" aria-label=\"总结 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>总结</h1>\n<p>算法的世界还是很有趣的</p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95\">https://zh.wikipedia.org/wiki/Floyd%E5%88%A4%E5%9C%88%E7%AE%97%E6%B3%95</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BB%8B%E7%BB%8D\">介绍</a></p>\n<ul>\n<li>\n<p><a href=\"#%E8%AF%81%E6%98%8E\">证明</a></p>\n<ul>\n<li><a href=\"#%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E7%8E%AF\">是否存在环</a></li>\n<li><a href=\"#%E8%AE%A1%E7%AE%97%E7%8E%AF%E7%9A%84%E9%95%BF%E5%BA%A6\">计算环的长度</a></li>\n<li><a href=\"#%E8%AE%A1%E7%AE%97%E7%8E%AF%E7%9A%84%E8%B5%B7%E7%82%B9\">计算环的起点</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A2%98\">题</a></p>\n<ul>\n<li><a href=\"#141-linked-list-cycle\">141. Linked List Cycle</a></li>\n<li><a href=\"#142-linked-list-cycle-ii\">142. Linked List Cycle II</a></li>\n<li><a href=\"#202-happy-number\">202. happy-number</a></li>\n<li><a href=\"#287-find-the-duplicate-number\">287. Find the Duplicate Number</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></p>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","frontmatter":{"title":"龟兔赛跑算法","date":"2019-12-04"}}},"pageContext":{"slug":"/2019-12-04-tortoise-and-hare-algorithm.markdown"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}