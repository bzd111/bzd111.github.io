{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-12-10-network/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc Redcarpet -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E8%AE%B0%E5%BD%95\">记录</a>\n<ul>\n<li><a href=\"#%E7%BD%91%E7%BB%9C%E7%A1%AC%E4%BB%B6\">网络硬件</a></li>\n<li><a href=\"#%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2\">网络部署</a></li>\n<li><a href=\"#linux-%E5%8D%8F%E8%AE%AE%E6%A0%88\">Linux 协议栈</a>\n<ul>\n<li><a href=\"#linux-%E6%94%B6%E5%8C%85%E6%B5%81%E7%A8%8B\">Linux 收包流程</a></li>\n<li><a href=\"#linux-%E5%8F%91%E5%8C%85%E6%B5%81%E7%A8%8B\">Linux 发包流程</a></li>\n</ul>\n</li>\n<li><a href=\"#linux-%E9%98%B2%E7%81%AB%E5%A2%99\">Linux 防火墙</a>\n<ul>\n<li><a href=\"#iptables\">iptables</a>\n<ul>\n<li><a href=\"#iptables-%E5%91%BD%E4%BB%A4\">iptables 命令</a></li>\n<li><a href=\"#iptables-%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99\">iptables 匹配规则</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%89%8D%E8%A8%80%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF\">前言网络传输技术</a>\n<ul>\n<li><a href=\"#tcp-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\">TCP 拥塞控制算法</a></li>\n</ul>\n</li>\n<li><a href=\"#http\">HTTP</a>\n<ul>\n<li><a href=\"#http1-0\">HTTP1.0</a></li>\n<li><a href=\"#http1-1-%E6%9C%80%E4%B8%BB%E6%B5%81\">HTTP1.1(最主流)</a></li>\n<li><a href=\"#http2-0\">HTTP2.0</a></li>\n<li><a href=\"#http3-0\">HTTP3.0</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p>前几天看了<a href=\"https://www.youtube.com/watch?v=30wCahZEjNg\">【Go 夜读】#68 网络知识十全大补丸</a>，现在简单地做下笔记，笔者感觉讲的很好，推荐大家去看下</p>\n<h1 id=\"记录\" style=\"position:relative;\"><a href=\"#%E8%AE%B0%E5%BD%95\" aria-label=\"记录 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>记录</h1>\n<h2 id=\"网络硬件\" style=\"position:relative;\"><a href=\"#%E7%BD%91%E7%BB%9C%E7%A1%AC%E4%BB%B6\" aria-label=\"网络硬件 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>网络硬件</h2>\n<ul>\n<li>\n<p>双绞线(twisted pair)</p>\n<p>线序 A: 白绿——1，绿——2，白橙——3，蓝——4，白蓝——5， 橙——6，白棕——7，棕——8</p>\n<p>线序 B: 白橙——1，橙——2，白绿——3，蓝——4，白蓝——5， 绿——6，白棕——7，棕——8</p>\n<p>绝缘铜导线，两两胶合，为了降低信号干扰，抵消电波。</p>\n<p>直通线，A-A、B-B (连路由器、交换机)\n交叉线，A-B（为了交换数据，A 的接受连到 B 的发送，B 的接受连到 A 的发送）</p>\n</li>\n<li>\n<p>集线器 Hub</p>\n<p>工作在物理层，复制多路转发</p>\n</li>\n<li>\n<p>以太网供电 PoE(Power over Ethernet)</p>\n<p>IP 电话机、无线 AP、部分交换机</p>\n</li>\n<li>\n<p>交换机 Switch</p>\n<p>小型局域网二层交换机(隔离局域网)、大型局域网的三层交换机</p>\n</li>\n<li>\n<p>网桥 Bridge</p>\n<p>工作于二层网络，连接多个局域网\ndocker 虚拟网桥 docker0，容器 veth 虚拟以太网卡，连接到网桥，容器和容器就可以通信了\n虚拟网卡(回环地址、tap、)</p>\n</li>\n<li>\n<p>路由器 Router</p>\n<p>工作于三层以太网，通过路由协议为报文提供路由，跨三层通信</p>\n<p>二层寻址是通过 mac 地址，三层寻址是通过路由协议，\n路由协议：路由器不同的网口，连接不同的子网，根据数据包的地址，查看哪个网口可以跳过去，然后就将这个数据包发过去。</p>\n</li>\n<li>\n<p>防火墙 Firewall\n传统防火墙工作于三层，更前沿的可以工作在四层和七层</p>\n</li>\n<li>\n<p>虚拟专用网 VPN</p>\n<p>公网上的虚拟加密通信网络，终端远程接入私有网络、两个私有网络的互联互通</p>\n<p>ssl vpn:在本地开一个应用层的代理(sock 代理，代理 tcp 或 udp)，把公司的域名映射到本地的 IP 上去，然后在本地监听目标端口，然后通过 ssl 加密传送到公司的 VPN 设备上去，然后在解密，传送到公司内网上去。</p>\n</li>\n<li>\n<p>网关 Gateway</p>\n<p>网络出口设备，工作于三层，集路由、防火墙、流控、VPN 功能于一体\n网桥是工作在二层的， 二层通常是局域网。网关是三层的，通常是内网和外网，两个网络之间的关卡，内外网隔离，架设 vpn，多个出口，负载均衡。</p>\n</li>\n<li>\n<p>无线接入点 AP</p>\n<p>运行 wifi 系列协议 802.11.x 的二层网络设备，无线网络的交换机，支持移动终端在多个接入点无缝漫游。</p>\n</li>\n</ul>\n<h2 id=\"网络部署\" style=\"position:relative;\"><a href=\"#%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2\" aria-label=\"网络部署 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>网络部署</h2>\n<p><img src=\"/assets/xiaoxingqiyewangluo.png\" alt=\"小型企业网络\">\n<img src=\"/assets/vpn.png\" alt=\"带vpn的企业网\">\n<img src=\"/assets/datacenter.png\" alt=\"数据中心网络\"></p>\n<h2 id=\"linux-协议栈\" style=\"position:relative;\"><a href=\"#linux-%E5%8D%8F%E8%AE%AE%E6%A0%88\" aria-label=\"linux 协议栈 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux 协议栈</h2>\n<h3 id=\"linux-收包流程\" style=\"position:relative;\"><a href=\"#linux-%E6%94%B6%E5%8C%85%E6%B5%81%E7%A8%8B\" aria-label=\"linux 收包流程 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux 收包流程</h3>\n<p>1 数据包到达网卡 NIC(Network Interface Card)</p>\n<p>2 NIC 检验 MAC 网卡(网卡非混杂模式)和桢的校验字段 FCS</p>\n<p>3 NIC 通过 DMA 将数据包放入提前映射好的内存区域</p>\n<p>4 NIC 将数据包的引用放入接收的 ring buffer 队列 rx 中</p>\n<p>5 NIC 等待 rx-usecs 的超时时间或者 rx 队列长度达到 rx-frames 后触发硬件中断 IRQ</p>\n<p>6 CPU 执行硬件中断和网卡的驱动程序</p>\n<p>7 驱动程序清理硬中断并触发软中断 NET_RX_SOFTIRQ</p>\n<p>8 软中断对网卡进行轮训收包</p>\n<p>9 数据包被放入 qdisc 队列</p>\n<p>10 将数据包送入协议栈，调用 ip_recv</p>\n<p>11 调用 netfilter 的 PREROUTING 链</p>\n<p>12 查找路由表，进行转发或者投递到 local</p>\n<p>13 对投递到 local 的数据包调用 netfilter 的 LOCAL_IN 链</p>\n<p>14 调用四层协议栈，如 tcp_v4_rcv</p>\n<p>15 查找到对应的 socket，运行 TCP 的状态机</p>\n<p>16 将数据放入 TCP 的接收缓冲区中</p>\n<p>17 通过 epoll 或者其他轮训方式通知应用程序</p>\n<p>18 应用程序读取程序</p>\n<p>混杂模式，不是 mac 不是本机的数据包也会处理。（虚拟机桥接模式、tcpdump wireshark 抓包）</p>\n<p>硬件中断(不能被嵌套)处理时间过长，会触发软中断去执行</p>\n<p>软中断执行 cpu 指令产生的中断</p>\n<p>syscall、异常中断</p>\n<p>半中断半轮训收包模式：数据包来了进入硬中断，然后进入软中断轮训收包，</p>\n<p>socket 五元祖：协议，目的地址、目的端口、源地址、源端口</p>\n<h3 id=\"linux-发包流程\" style=\"position:relative;\"><a href=\"#linux-%E5%8F%91%E5%8C%85%E6%B5%81%E7%A8%8B\" aria-label=\"linux 发包流程 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux 发包流程</h3>\n<p>1 应用数据发送程序</p>\n<p>2 TCP 为发送的数据申请 skb</p>\n<p>3 构建 TCP 头部，如 src 和 dst 的 port，checksum</p>\n<p>4 调用第三层协议，构建 IP 头部，调用 netfilter 的 LOCAL_OUT 链</p>\n<p>5 查找路由表</p>\n<p>6 调用 netfilter 的 POST_ROUTING 链</p>\n<p>7 对超时 MTU 的报文进行分片(fragment)</p>\n<p>8 调用而成的发包函数 dev_queue_xmit</p>\n<p>9 将待发数据包放入输出的 QDisc 队列</p>\n<p>10 调用网卡驱动程序，将数据包放入循环缓冲队列 tx</p>\n<p>11 驱动程序在 tx-usecs 的超时时间后，或者积累 tx-frames 个待发数据包后触发软中断</p>\n<p>12 驱动程序启用网卡的硬件中断</p>\n<p>13 驱动程序将数据包映射到 DMA 内存</p>\n<p>14 网卡从 DMA 中取数据并发送</p>\n<p>15 网卡发送完毕后触发硬件中断</p>\n<p>16 硬中断清理中断信号后触发软中断</p>\n<p>17 软中断释放已经发送玩的数据包的内存</p>\n<h2 id=\"linux-防火墙\" style=\"position:relative;\"><a href=\"#linux-%E9%98%B2%E7%81%AB%E5%A2%99\" aria-label=\"linux 防火墙 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux 防火墙</h2>\n<h3 id=\"iptables\" style=\"position:relative;\"><a href=\"#iptables\" aria-label=\"iptables permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iptables</h3>\n<p>应用层规则管理工具和内核中的 table 模块(如 filter、nat)</p>\n<h4 id=\"iptables-命令\" style=\"position:relative;\"><a href=\"#iptables-%E5%91%BD%E4%BB%A4\" aria-label=\"iptables 命令 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iptables 命令</h4>\n<p>格式：iptables [-t table] command [chain][match][target]</p>\n<p>例如：iptables -t filter -A INPUT -p tcp —sport 80 -j ACCEPT</p>\n<p>|-table-|-cmd &#x26; chain-|-------match------|-target-|</p>\n<p>系统自带 tables 包括 filter、nat、mangle，每个 table 包含一些系统自带的链或用户自建的链</p>\n<p>默认使用 filter,表中包含 INPUT，FORWARD，OUTPUT 三条链(接收数据包、转发数据包、发送数据包)</p>\n<p>常用的 target 是 ACCEPUT 和 DROP，DROP 和 REJECT 的区别就是 DROP 直接丢包，REJECT 会返回一个 ICMP 错误报文</p>\n<p>简单命令：</p>\n<p>1、查看设置，iptables -L -n [-t table_name]</p>\n<p>2、清除 filter 表中的规则，iptables -F</p>\n<p>3、设置默认策略，iptables -P [INPUT|OUTPUT|FORWARD][drop|accept]</p>\n<p>一般会设置 accept，然后设置黑名单</p>\n<h4 id=\"iptables-匹配规则\" style=\"position:relative;\"><a href=\"#iptables-%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99\" aria-label=\"iptables 匹配规则 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iptables 匹配规则</h4>\n<p>1、匹配 IP 地址，source(‘-s’ ‘—source’ or ‘—src’), destination(‘-d’ ‘—destination’ or ‘—dst’)</p>\n<p>例如：iptables -A INPUT -s 10.10.10.0/24 -j DROP</p>\n<p>2、逻辑取反，’!’表示 not，例如’-s!localhost’表示所有不是来自本机的数据包</p>\n<p>3、指定源和目的网卡接口，‘-i’(—in-interface’), ‘-o’(—out-interface)</p>\n<p>4、高级拓展匹配，使用-p 或-m 加载协议模块和特殊功能模块，使用模块提供的更多匹配细节，可以使用-h 或者—help 获取帮助，如：iptables -p tcp -h</p>\n<p>4.1 TCP 拓展匹配</p>\n<p>—tcp-falgs，例如：iptables -A INPUT —protocol tcp —tcp-flags ALL SYN,ACK -j DROP</p>\n<p>— source-port 或—sport，对源端口匹配</p>\n<p>—destination-port 或者—dport，对目的端口匹配</p>\n<p>4.2 UDP 拓展匹配</p>\n<p>提供—source-port —sport —destination-port —dport 与 TCP 相同</p>\n<p>dnat 劫持数据，通过修改目的地址和目的端口，将数据发到本机，然后通过本机的应用程序，进行接收。</p>\n<h2 id=\"前言网络传输技术\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF\" aria-label=\"前言网络传输技术 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言网络传输技术</h2>\n<h3 id=\"tcp-拥塞控制算法\" style=\"position:relative;\"><a href=\"#tcp-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\" aria-label=\"tcp 拥塞控制算法 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP 拥塞控制算法</h3>\n<p>MSS：tcp 报文长度</p>\n<p>cwnd：拥塞控制窗口</p>\n<p>rtt：数据包在发送端和接收端来回时间</p>\n<p>Tahoe 算法:</p>\n<p>一阶段慢启动，指数增长，从 1 开始，</p>\n<p>遇到超时发送窗口，从 1 开始，指数增长，然后到上次最大发送窗口的一般，进行线性增长</p>\n<p>Reno 算法:</p>\n<p>出现 3 次重传的时候，把自己的发送窗口缩小一定比例(1/2,1/3)，然后线性增长，重传的 ACK 如果还是超时，然后从 1 开始，指数增长。</p>\n<p>Cublic 算法:</p>\n<p>packet loss: 丢包</p>\n<p>Wmax: 最大发送窗口</p>\n<p>三次曲线方式增加发送窗口，</p>\n<p>BBR 算法：</p>\n<p>通过对端的 ACK 确认机制，一秒中发送一定数量的包，然后看回来接收了多少包，然后包的数量除以时间就是带宽。</p>\n<p>然后继续增大发送数据包，</p>\n<p>直接测量当前带宽大小，通过对端返回的 ACK 包</p>\n<h2 id=\"http\" style=\"position:relative;\"><a href=\"#http\" aria-label=\"http permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP</h2>\n<h3 id=\"http10\" style=\"position:relative;\"><a href=\"#http10\" aria-label=\"http10 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP1.0</h3>\n<p>缺点：不能复用 tcp 连接，每个资源都要新建 tcp 连接，tcp 慢启动，速率很慢。</p>\n<p>新建连接会造成性能压力</p>\n<h3 id=\"http11最主流\" style=\"position:relative;\"><a href=\"#http11%E6%9C%80%E4%B8%BB%E6%B5%81\" aria-label=\"http11最主流 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP1.1(最主流)</h3>\n<p>改进：流水线 pipeline，复用连接。</p>\n<p>前一个连接应答完成，才能进行发送下一个。文本协议不支持乱序</p>\n<p>缺点：头部阻塞(前一个连接应答不完成，后面的都会等待)</p>\n<h3 id=\"http20\" style=\"position:relative;\"><a href=\"#http20\" aria-label=\"http20 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP2.0</h3>\n<p>改进：改成二进制协议，发送二进制的桢(文件切成片)，支持乱序，解决头部阻塞</p>\n<p>服务端主动 push，减少 rtt，提高加载速度</p>\n<p>缺点：如果桢丢失，接收端 tcp 协议会等待，然后请求重传(ack 超时、三次确认)，等接收到到完整数据，才把提交到应用层</p>\n<h3 id=\"http30\" style=\"position:relative;\"><a href=\"#http30\" aria-label=\"http30 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP3.0</h3>\n<p>改进：QUIC,使用 UDP，彻底解决头部阻塞</p>\n<p>FEC：通过几个包计算除一个校验值，即使传输过程丢失了一个包，还能通过 FEC 和其他包，能算出这个包。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%AE%B0%E5%BD%95\">记录</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%BD%91%E7%BB%9C%E7%A1%AC%E4%BB%B6\">网络硬件</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%BD%91%E7%BB%9C%E9%83%A8%E7%BD%B2\">网络部署</a></p>\n</li>\n<li>\n<p><a href=\"#linux-%E5%8D%8F%E8%AE%AE%E6%A0%88\">Linux 协议栈</a></p>\n<ul>\n<li><a href=\"#linux-%E6%94%B6%E5%8C%85%E6%B5%81%E7%A8%8B\">Linux 收包流程</a></li>\n<li><a href=\"#linux-%E5%8F%91%E5%8C%85%E6%B5%81%E7%A8%8B\">Linux 发包流程</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#linux-%E9%98%B2%E7%81%AB%E5%A2%99\">Linux 防火墙</a></p>\n<ul>\n<li>\n<p><a href=\"#iptables\">iptables</a></p>\n<ul>\n<li><a href=\"#iptables-%E5%91%BD%E4%BB%A4\">iptables 命令</a></li>\n<li><a href=\"#iptables-%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99\">iptables 匹配规则</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF\">前言网络传输技术</a></p>\n<ul>\n<li><a href=\"#tcp-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95\">TCP 拥塞控制算法</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#http\">HTTP</a></p>\n<ul>\n<li><a href=\"#http10\">HTTP1.0</a></li>\n<li><a href=\"#http11%E6%9C%80%E4%B8%BB%E6%B5%81\">HTTP1.1(最主流)</a></li>\n<li><a href=\"#http20\">HTTP2.0</a></li>\n<li><a href=\"#http30\">HTTP3.0</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[笔记]网络知识","date":"2019-12-10"}}},"pageContext":{"slug":"/2019-12-10-network"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}