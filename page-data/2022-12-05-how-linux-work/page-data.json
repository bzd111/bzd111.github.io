{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-12-05-how-linux-work/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc GitLab -->\n<ul>\n<li><a href=\"#linux%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84\">Linux是怎样工作的</a></li>\n<li><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\">准备工作</a></li>\n<li><a href=\"#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\">系统调用</a>\n<ul>\n<li><a href=\"#strace-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\">strace 查看系统调用</a></li>\n<li><a href=\"#sar\">sar</a></li>\n<li><a href=\"#c%E6%A0%87%E5%87%86%E5%BA%93\">C标准库</a>\n<ul>\n<li><a href=\"#ldd\">ldd</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86\">进程管理</a>\n<ul>\n<li><a href=\"#%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B\">创建进程</a></li>\n<li><a href=\"#fork%E5%87%BD%E6%95%B0\">fork()函数</a></li>\n<li><a href=\"#execve%E5%87%BD%E6%95%B0\">execve()函数</a>\n<ul>\n<li><a href=\"#linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6\">linux可执行文件</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8\">进程调度器</a>\n<ul>\n<li><a href=\"#%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2\">上下文切换</a></li>\n<li><a href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81\">进程的状态</a>\n<ul>\n<li><a href=\"#%E5%A4%84%E4%BA%8E%E7%9D%A1%E7%9C%A0%E6%80%81%E7%9A%84%E4%BA%8B%E4%BB%B6\">处于睡眠态的事件</a></li>\n<li><a href=\"#%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2\">状态转换</a></li>\n<li><a href=\"#%E7%A9%BA%E9%97%B2%E7%8A%B6%E6%80%81\">空闲状态</a></li>\n<li><a href=\"#%E5%90%9E%E5%90%90%E9%87%8F%E4%B8%8E%E5%BB%B6%E8%BF%9F\">吞吐量与延迟</a></li>\n<li><a href=\"#%E7%8E%B0%E5%AE%9E%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F\">现实中的系统</a></li>\n<li><a href=\"#%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E9%80%BB%E8%BE%91cpu%E6%97%B6%E7%9A%84%E8%B0%83%E5%BA%A6\">存在多个逻辑CPU时的调度</a></li>\n<li><a href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E5%92%8C%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4\">运行时间和执行时间</a></li>\n<li><a href=\"#%E7%8E%B0%E5%AE%9E%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B\">现实中的进程</a></li>\n<li><a href=\"#%E5%8F%98%E6%9B%B4%E4%BC%98%E5%85%88%E7%BA%A7\">变更优先级</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%86%85%E5%AD%98\">内存</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF\">内存相关的统计信息</a>\n<ul>\n<li><a href=\"#%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3out-of-memory-oom\">内存不足(Out Of Memory) OOM</a></li>\n<li><a href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\">简单的内存分配</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98\">内存分配的问题</a></li>\n<li><a href=\"#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98\">虚拟内存</a>\n<ul>\n<li><a href=\"#%E9%A1%B5%E8%A1%A8\">页表</a></li>\n<li><a href=\"#%E4%B8%BA%E8%BF%9B%E7%A8%8B%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98\">为进程分配内存</a></li>\n<li><a href=\"#%E5%9C%A8%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E6%97%B6\">在动态分配内存时</a></li>\n<li><a href=\"#%E5%88%A9%E7%94%A8%E4%B8%8A%E5%B1%82%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\">利用上层进行内存分配</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%9E%E9%AA%8C\">实验</a></li>\n<li><a href=\"#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8\">虚拟内存的应用</a>\n<ul>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84\">文件映射</a></li>\n<li><a href=\"#%E8%AF%B7%E6%B1%82%E5%88%86%E9%A1%B5%E6%9C%BA\">请求分页机</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6\">写时复制</a></li>\n<li><a href=\"#swap\">Swap</a></li>\n<li><a href=\"#%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8\">多级页表</a></li>\n<li><a href=\"#%E6%A0%87%E5%87%86%E5%A4%A7%E9%A1%B5\">标准大页</a>\n<ul>\n<li><a href=\"#%E9%80%8F%E6%98%8E%E5%A4%A7%E9%A1%B5\">透明大页</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%AD%98%E5%82%A8%E5%B1%82%E6%AC%A1\">存储层次</a>\n<ul>\n<li><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98\">高速缓存</a>\n<ul>\n<li><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F\">高速缓存工作方式</a></li>\n<li><a href=\"#%E8%AF%BB\">读</a></li>\n<li><a href=\"#%E5%86%99\">写</a></li>\n<li><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E4%B8%8D%E8%B6%B3%E6%97%B6\">高速缓存不足时</a></li>\n<li><a href=\"#%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98\">多级缓存</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98\">页面缓存</a></li>\n<li><a href=\"#%E6%B5%81%E7%A8%8B\">流程</a>\n<ul>\n<li><a href=\"#%E8%AF%BB%E5%8F%96\">读取</a></li>\n<li><a href=\"#%E5%86%99%E5%85%A5\">写入</a></li>\n<li><a href=\"#%E5%90%8C%E6%AD%A5%E5%86%99%E5%85%A5\">同步写入</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9E%E9%AA%8C\">读取文件的实验</a>\n<ul>\n<li><a href=\"#%E9%87%87%E9%9B%86%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF\">采集统计信息</a></li>\n<li><a href=\"#%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9E%E9%AA%8C\">写入文件的实验</a></li>\n<li><a href=\"#%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0\">页面缓存调优参数</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">文件系统</a>\n<ul>\n<li><a href=\"#linux%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">Linux的文件系统</a>\n<ul>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E7%94%A8%E6%88%B7%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3\">面向用户的访问接口</a></li>\n<li><a href=\"#%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E6%B5%81%E7%A8%8B\">读取文件流程</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%85%83%E6%95%B0%E6%8D%AE\">数据与元数据</a></li>\n<li><a href=\"#%E5%AE%B9%E9%87%8F%E9%99%90%E5%88%B6\">容量限制</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8D%E4%B8%80%E8%87%B4\">文件系统不一致</a>\n<ul>\n<li><a href=\"#%E6%97%A5%E5%BF%97\">日志</a></li>\n<li><a href=\"#%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6-1\">写时复制</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E7%9A%84%E7%A7%8D%E7%B1%BB\">文件的种类</a>\n<ul>\n<li><a href=\"#%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6\">设备文件</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87\">字符设备</a></li>\n<li><a href=\"#%E5%9D%97%E8%AE%BE%E5%A4%87\">块设备</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">各种各样的文件系统</a>\n<ul>\n<li><a href=\"#%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">基于内存的文件系统</a></li>\n<li><a href=\"#%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">网络文件系统</a></li>\n<li><a href=\"#%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">虚拟文件系统</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8\">外部存储器</a>\n<ul>\n<li><a href=\"#hdd%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99%E6%9C%BA%E5%88%B6\">HDD的数据读写机制</a>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%B5%81%E7%A8%8B\">数据传输流程</a></li>\n<li><a href=\"#%E5%86%99%E5%85%A5%E7%89%B9%E6%80%A7\">写入特性</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%A2%84%E8%AF%BB\">预读</a></li>\n<li><a href=\"#ssd\">SSD</a></li>\n</ul>\n</li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"linux是怎样工作的\" style=\"position:relative;\"><a href=\"#linux%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"linux是怎样工作的 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux是怎样工作的</h1>\n<h1 id=\"准备工作\" style=\"position:relative;\"><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" aria-label=\"准备工作 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>准备工作</h1>\n<p>Ubuntu 16.04/x86_64</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo apt install binutils build-essential sysstat\n</code></pre></div>\n<h1 id=\"系统调用\" style=\"position:relative;\"><a href=\"#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\" aria-label=\"系统调用 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>系统调用</h1>\n<p>hello.c</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n#include &lt;stdio.h>\n\nint main(void){\n\tputs(\"hello, world\");\n\treturn 0;\n}\n</code></pre></div>\n<p><a href=\"http://hello.py/\">hello.py</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(\"hello, world\")\n</code></pre></div>\n<h2 id=\"strace-查看系统调用\" style=\"position:relative;\"><a href=\"#strace-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\" aria-label=\"strace 查看系统调用 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>strace 查看系统调用</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cc -o hello hello.c\n#./hello\nhello, world\n# strace -o hello.log ./hello\nhello, world\n# cat hello.log\n# strace -T -o  hello_t.log ./hello # 带上耗时\n\n# strace -T -o hello.py.log python3 hello.py\n</code></pre></div>\n<h2 id=\"sar\" style=\"position:relative;\"><a href=\"#sar\" aria-label=\"sar permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sar</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sar -P ALL 1 # 查看各模式下的运行时间\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t10/19/2022 \t_x86_64_\t(2 CPU)\n\n10:22:31 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n10:22:32 PM     all      0.51      0.00      0.00      0.00      0.00     99.49\n10:22:32 PM       0      1.01      0.00      0.00      0.00      0.00     98.99\n10:22:32 PM       1      0.00      0.00      0.00      0.00      0.00    100.00\n\n10:22:32 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n10:22:33 PM     all      8.54      0.00      0.50      0.50      0.00     90.45\n10:22:33 PM       0      9.00      0.00      1.00      0.00      0.00     90.00\n10:22:33 PM       1      8.08      0.00      0.00      1.01      0.00     90.91\n</code></pre></div>\n<p>用户态无限循环</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cat loop.c\nint main(void){\n\tfor(;;)\n\t;\n}\n\ncc -o loop loop.c\n./loop &amp;\n[1] 224242\nsar -P ALL 1\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t10/19/2022 \t_x86_64_\t(2 CPU)\n\n10:29:53 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n10:29:54 PM     all     60.20      0.00      0.50      0.50      0.00     38.81\n10:29:54 PM       0     20.79      0.00      0.99      0.99      0.00     77.23\n10:29:54 PM       1    100.00      0.00      0.00      0.00      0.00      0.00\n\n10:29:54 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n10:29:55 PM     all     51.26      0.00      0.50      0.00      0.00     48.24\n10:29:55 PM       0      2.02      0.00      1.01      0.00      0.00     96.97\n10:29:55 PM       1    100.00      0.00      0.00      0.00      0.00      0.00\n\n10:29:55 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n10:29:56 PM     all     50.25      0.00      0.00      0.00      0.00     49.75\n10:29:56 PM       0      0.00      0.00      0.00      0.00      0.00    100.00\n10:29:56 PM       1    100.00      0.00      0.00      0.00      0.00      0.00\n</code></pre></div>\n<p>大量内核态</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cat ppidloop.c\n#include &lt;sys/types.h>\n#include &lt;unistd.h>\n\nint main(void)\n{\n    for(;;)\n        getppid();\n}\n\ncc -o ppidloop ppidloop.c\n./ppidloop &amp;\n[1] 225005\n\nsar -P ALL 1 1\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t10/19/2022 \t_x86_64_\t(2 CPU)\n\n10:35:01 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n10:35:02 PM     all     16.67      0.00     35.86      0.00      0.00     47.47\n10:35:02 PM       0      2.04      0.00      2.04      0.00      0.00     95.92\n10:35:02 PM       1     31.00      0.00     69.00      0.00      0.00      0.00\n\nAverage:        CPU     %user     %nice   %system   %iowait    %steal     %idle\nAverage:        all     16.67      0.00     35.86      0.00      0.00     47.47\nAverage:          0      2.04      0.00      2.04      0.00      0.00     95.92\nAverage:          1     31.00      0.00     69.00      0.00      0.00      0.00\n</code></pre></div>\n<h2 id=\"c标准库\" style=\"position:relative;\"><a href=\"#c%E6%A0%87%E5%87%86%E5%BA%93\" aria-label=\"c标准库 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C标准库</h2>\n<p>系统调用的标准库及POSIX标准中定义的函数</p>\n<p>通常会以GNU项目提供的glibc作为C标准库使用</p>\n<h3 id=\"ldd\" style=\"position:relative;\"><a href=\"#ldd\" aria-label=\"ldd permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ldd</h3>\n<p>ldd用于查看程序所依赖的库</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ldd /bin/echo\n\tlinux-vdso.so.1 (0x00007ffd37dbe000)\n\tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fc36d43a000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007fc36d640000)\n\n$ ldd /usr/bin/python3\n\tlinux-vdso.so.1 (0x00007ffe3ea61000)\n\tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f6093a1f000)\n\tlibpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f60939fc000)\n\tlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f60939f6000)\n\tlibutil.so.1 => /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f60939f1000)\n\tlibm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f60938a2000)\n\tlibexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f6093874000)\n\tlibz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f6093856000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007f6093c1a000)\n</code></pre></div>\n<h1 id=\"进程管理\" style=\"position:relative;\"><a href=\"#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86\" aria-label=\"进程管理 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>进程管理</h1>\n<h2 id=\"创建进程\" style=\"position:relative;\"><a href=\"#%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B\" aria-label=\"创建进程 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建进程</h2>\n<ul>\n<li>将同一个进程分成多个进程处理</li>\n<li>创建</li>\n</ul>\n<p>Linux提供了fork()函数和execve()函数，其底层分别调用clone()和execve()的系统调用</p>\n<h2 id=\"fork函数\" style=\"position:relative;\"><a href=\"#fork%E5%87%BD%E6%95%B0\" aria-label=\"fork函数 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fork()函数</h2>\n<ol>\n<li>为子进程申请内存空间，并复制父进程的内存到子进程的内存空间</li>\n<li>父进程与子进程分裂成两个进程，以执行不同的代码。这一点的实现依赖于fork()函数分别返回不同的值给父进程与子进程。</li>\n</ol>\n<p>fork.c</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include&lt;unistd.h>\n#include&lt;stdio.h>\n#include&lt;stdlib.h>\n#include&lt;err.h>\n\nstatic void child(){\n    printf(\"I'm child my pid is %d. \\\\n\", getpid());\n    exit(EXIT_SUCCESS);\n}\n\nstatic void parent(pid_t pid_c){\n    printf(\"I'm parent my pid is %d and the pid of my child is %d. \\\\n\", getpid(), pid_c);\n    exit(EXIT_SUCCESS);\n}\n\nint main(void){\n    pid_t ret;\n    ret = fork();\n    if(ret == -1)\n        err(EXIT_FAILURE, \"fork failed\");\n    if(ret == 0){\n        // fork()会返回0给子进程\n        child();\n    }else{\n        //fork()会返回新创建的子进程的ID\n        parent(ret);\n    }\n    err(EXIT_FAILURE, \"shouldn't reach here\");\n}\n</code></pre></div>\n<h2 id=\"execve函数\" style=\"position:relative;\"><a href=\"#execve%E5%87%BD%E6%95%B0\" aria-label=\"execve函数 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>execve()函数</h2>\n<ul>\n<li>读取可执行文件，并读取创建进程的内存印象所需的信息</li>\n<li>用新进程的数据覆盖当前进程的内存</li>\n<li>从最初的命令开始运行新的进程</li>\n</ul>\n<h3 id=\"linux可执行文件\" style=\"position:relative;\"><a href=\"#linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6\" aria-label=\"linux可执行文件 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>linux可执行文件</h3>\n<p>linux可执行文件的结构遵循名为ELF(Executable and Linkable Format)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ubuntu@VM-4-14-ubuntu:~$ readelf -h /usr/bin/sleep\nELF Header:\n  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00\n  Class:                             ELF64\n  Data:                              2's complement, little endian\n  Version:                           1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI Version:                       0\n  Type:                              DYN (Shared object file)\n  Machine:                           Advanced Micro Devices X86-64\n  Version:                           0x1\n  Entry point address:               0x2850\n  Start of program headers:          64 (bytes into file)\n  Start of section headers:          37336 (bytes into file)\n  Flags:                             0x0\n  Size of this header:               64 (bytes)\n  Size of program headers:           56 (bytes)\n  Number of program headers:         13\n  Size of section headers:           64 (bytes)\n  Number of section headers:         30\n  Section header string table index: 29\n</code></pre></div>\n<p>代码段和数据段在文件中的偏移量、大小和起始位置。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ubuntu@VM-4-14-ubuntu:~$ readelf -S /usr/bin/sleep\nThere are 30 section headers, starting at offset 0x91d8:\n\nSection Headers:\n  [Nr] Name              Type             Address           Offset\n       Size              EntSize          Flags  Link  Info  Align\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .interp           PROGBITS         0000000000000318  00000318\n       000000000000001c  0000000000000000   A       0     0     1\n  [ 2] .note.gnu.propert NOTE             0000000000000338  00000338\n       0000000000000020  0000000000000000   A       0     0     8\n  [ 3] .note.gnu.build-i NOTE             0000000000000358  00000358\n       0000000000000024  0000000000000000   A       0     0     4\n  [ 4] .note.ABI-tag     NOTE             000000000000037c  0000037c\n       0000000000000020  0000000000000000   A       0     0     4\n  [ 5] .gnu.hash         GNU_HASH         00000000000003a0  000003a0\n       00000000000000a8  0000000000000000   A       6     0     8\n  [ 6] .dynsym           DYNSYM           0000000000000448  00000448\n       0000000000000600  0000000000000018   A       7     1     8\n  [ 7] .dynstr           STRTAB           0000000000000a48  00000a48\n       000000000000031f  0000000000000000   A       0     0     1\n  [ 8] .gnu.version      VERSYM           0000000000000d68  00000d68\n       0000000000000080  0000000000000002   A       6     0     2\n  [ 9] .gnu.version_r    VERNEED          0000000000000de8  00000de8\n       0000000000000060  0000000000000000   A       7     1     8\n  [10] .rela.dyn         RELA             0000000000000e48  00000e48\n       00000000000002b8  0000000000000018   A       6     0     8\n  [11] .rela.plt         RELA             0000000000001100  00001100\n       00000000000003f0  0000000000000018  AI       6    25     8\n  [12] .init             PROGBITS         0000000000002000  00002000\n       000000000000001b  0000000000000000  AX       0     0     4\n  [13] .plt              PROGBITS         0000000000002020  00002020\n       00000000000002b0  0000000000000010  AX       0     0     16\n  [14] .plt.got          PROGBITS         00000000000022d0  000022d0\n       0000000000000010  0000000000000010  AX       0     0     16\n  [15] .plt.sec          PROGBITS         00000000000022e0  000022e0\n       00000000000002a0  0000000000000010  AX       0     0     16\n  [16] .text             PROGBITS         0000000000002580  00002580\n       0000000000003692  0000000000000000  AX       0     0     16\n  [17] .fini             PROGBITS         0000000000005c14  00005c14\n       000000000000000d  0000000000000000  AX       0     0     4\n  [18] .rodata           PROGBITS         0000000000006000  00006000\n       0000000000000f6c  0000000000000000   A       0     0     32\n  [19] .eh_frame_hdr     PROGBITS         0000000000006f6c  00006f6c\n       00000000000002b4  0000000000000000   A       0     0     4\n  [20] .eh_frame         PROGBITS         0000000000007220  00007220\n       0000000000000d18  0000000000000000   A       0     0     8\n  [21] .init_array       INIT_ARRAY       0000000000009bb0  00008bb0\n       0000000000000008  0000000000000008  WA       0     0     8\n  [22] .fini_array       FINI_ARRAY       0000000000009bb8  00008bb8\n       0000000000000008  0000000000000008  WA       0     0     8\n  [23] .data.rel.ro      PROGBITS         0000000000009bc0  00008bc0\n       00000000000000b8  0000000000000000  WA       0     0     32\n  [24] .dynamic          DYNAMIC          0000000000009c78  00008c78\n       00000000000001f0  0000000000000010  WA       7     0     8\n  [25] .got              PROGBITS         0000000000009e68  00008e68\n       0000000000000190  0000000000000008  WA       0     0     8\n  [26] .data             PROGBITS         000000000000a000  00009000\n       0000000000000080  0000000000000000  WA       0     0     32\n  [27] .bss              NOBITS           000000000000a080  00009080\n       00000000000001b8  0000000000000000  WA       0     0     32\n  [28] .gnu_debuglink    PROGBITS         0000000000000000  00009080\n       0000000000000034  0000000000000000           0     0     4\n  [29] .shstrtab         STRTAB           0000000000000000  000090b4\n       000000000000011d  0000000000000000           0     0     1\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h1 id=\"进程调度器\" style=\"position:relative;\"><a href=\"#%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8\" aria-label=\"进程调度器 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>进程调度器</h1>\n<ul>\n<li>一个CPU同事只运行一个进程</li>\n<li>在同时进行多个进程时，每个进程都会获得适当的时长，轮流在CPU上执行处理</li>\n</ul>\n<p>系统识别出来的CPU成为<code class=\"language-text\">逻辑CPU</code>，开启超线程，每一个线程都会被识别为逻辑CPU</p>\n<p>sched.c</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>taskset通过-c选项，可以指定程序仅运行在指定的逻辑CPU上。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">taskset -c 0 ./sched &lt;n> &lt;total> &lt;resol>\n</code></pre></div>\n<h2 id=\"上下文切换\" style=\"position:relative;\"><a href=\"#%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2\" aria-label=\"上下文切换 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>上下文切换</h2>\n<p>是指切换正在逻辑CPU上运行的进程。</p>\n<h2 id=\"进程的状态\" style=\"position:relative;\"><a href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81\" aria-label=\"进程的状态 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>进程的状态</h2>\n<p>运行态(R)：正在逻辑CPU上运行</p>\n<p>就绪态(R)：进程具备运行条件，等待分配CPU时间</p>\n<p>睡眠态(S/D)：进程不准备运行，除非发生某事件。在此期间不消耗CPU时间</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">               S是指可通过接收信号回到运行态，D主要出现于等待外部存储器的访问时\n</code></pre></div>\n<p>僵死状态(Z)：进程运行结束，正在等待父进程将其回收</p>\n<h3 id=\"处于睡眠态的事件\" style=\"position:relative;\"><a href=\"#%E5%A4%84%E4%BA%8E%E7%9D%A1%E7%9C%A0%E6%80%81%E7%9A%84%E4%BA%8B%E4%BB%B6\" aria-label=\"处于睡眠态的事件 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>处于睡眠态的事件</h3>\n<ol>\n<li>等待指定的事件(比如等待3分钟)</li>\n<li>等待用户通过键盘或鼠标等设备进行输入</li>\n<li>等待HDD或SDD等外部存储器的读写结束</li>\n<li>等待网络的数据收发结束</li>\n</ol>\n<h3 id=\"状态转换\" style=\"position:relative;\"><a href=\"#%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2\" aria-label=\"状态转换 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>状态转换</h3>\n<p><img src=\"Linux%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84%2087ed1df30fa64c79bfce432f71de4fec/IMG_8541_4.heic\" alt=\"IMG_8541 4.HEIC\"></p>\n<h3 id=\"空闲状态\" style=\"position:relative;\"><a href=\"#%E7%A9%BA%E9%97%B2%E7%8A%B6%E6%80%81\" aria-label=\"空闲状态 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>空闲状态</h3>\n<p>如果没有任务在CPU上运行，逻辑CPU会运行一个被称为空闲进程的不执行任何处理的特殊进程</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ubuntu@VM-4-14-ubuntu:~$ cat loop.py\nwhile True:\n    pass\nubuntu@VM-4-14-ubuntu:~$ taskset -c 0 python3 loop.py &amp;\n[1] 2818225\nubuntu@VM-4-14-ubuntu:~$ sar -P ALL 1\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t10/31/2022 \t_x86_64_\t(2 CPU)\n\n01:27:20 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n01:27:21 PM     all     55.22      0.00      1.00      0.00      0.00     43.78\n01:27:21 PM       0    100.00      0.00      0.00      0.00      0.00      0.00\n01:27:21 PM       1     10.89      0.00      1.98      0.00      0.00     87.13\n\n01:27:21 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n01:27:22 PM     all     50.50      0.00      0.00      0.00      0.00     49.50\n01:27:22 PM       0    100.00      0.00      0.00      0.00      0.00      0.00\n01:27:22 PM       1      1.00      0.00      0.00      0.00      0.00     99.00\n\n01:27:22 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n01:27:23 PM     all     51.01      0.00      0.51      0.00      0.00     48.48\n01:27:23 PM       0    100.00      0.00      0.00      0.00      0.00      0.00\n01:27:23 PM       1      1.02      0.00      1.02      0.00      0.00     97.96\n\n01:27:23 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n01:27:24 PM     all     62.81      0.00      0.50      1.01      0.00     35.68\n01:27:24 PM       0    100.00      0.00      0.00      0.00      0.00      0.00\n01:27:24 PM       1     25.25      0.00      1.01      2.02      0.00     71.72\n</code></pre></div>\n<h3 id=\"吞吐量与延迟\" style=\"position:relative;\"><a href=\"#%E5%90%9E%E5%90%90%E9%87%8F%E4%B8%8E%E5%BB%B6%E8%BF%9F\" aria-label=\"吞吐量与延迟 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>吞吐量与延迟</h3>\n<p>吞吐量：单位时间内的总工作量，越大越好</p>\n<p>吞吐量 = 处理完成的进程数量 / 耗费的时间</p>\n<p>延迟：各种处理从开始到完成所耗费的时间，越短越好</p>\n<p>延迟 = 结束处理的时间 - 开始处理的时间</p>\n<h3 id=\"现实中的系统\" style=\"position:relative;\"><a href=\"#%E7%8E%B0%E5%AE%9E%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F\" aria-label=\"现实中的系统 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>现实中的系统</h3>\n<ul>\n<li>空闲状态。由于逻辑CPU处于空闲状态，所以吞吐量会降低</li>\n<li>进程正在运行，且没有处于就绪态的进程，这是一种理想状态。如果在这样的状态下加入一个处于就绪态的进程</li>\n<li>进程正在运行中，且存在就绪态的进程。这是吞吐量很大，但是延迟会变长</li>\n</ul>\n<p>sar 命令中的%idle字段，</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ubuntu@VM-4-14-ubuntu:~$ sar -q 1 1\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t10/31/2022 \t_x86_64_\t(2 CPU)\n\n08:24:36 PM   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15   blocked\n08:24:37 PM         0       379      0.15      0.15      0.08         0\nAverage:            0       379      0.15      0.15      0.08         0\n</code></pre></div>\n<p>sar -q的runq-sz字段。该字段显示的是处于运行态或者就绪态的进程总数(全部逻辑CPU的合计值)</p>\n<h3 id=\"存在多个逻辑cpu时的调度\" style=\"position:relative;\"><a href=\"#%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E9%80%BB%E8%BE%91cpu%E6%97%B6%E7%9A%84%E8%B0%83%E5%BA%A6\" aria-label=\"存在多个逻辑cpu时的调度 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>存在多个逻辑CPU时的调度</h3>\n<ul>\n<li>一个CPU同时只能运行一个进程</li>\n<li>在同时运行多个进程时，每个进程都会获得适当的时长，轮流在CPU上执行处理</li>\n<li>对于多核CPU的计算机来说，只有同时运行多个进程才能提高吞吐量。</li>\n<li>与只有单个逻辑CPU时一样，当进程数量多于逻辑CPU数量是，吞吐量就不会在提高</li>\n</ul>\n<p>获取cpu数量</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ grep -c processor /proc/cpuinfo\n2\n</code></pre></div>\n<h3 id=\"运行时间和执行时间\" style=\"position:relative;\"><a href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E5%92%8C%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4\" aria-label=\"运行时间和执行时间 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>运行时间和执行时间</h3>\n<ul>\n<li>运行时间：进程从开始运行到运行结束为止所经过的时间</li>\n<li>执行时间：进程实际占用逻辑CPU的时长</li>\n</ul>\n<h3 id=\"现实中的进程\" style=\"position:relative;\"><a href=\"#%E7%8E%B0%E5%AE%9E%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B\" aria-label=\"现实中的进程 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>现实中的进程</h3>\n<p>ps -eo的命令，etime字段和time字段分别表示进程从开始到执行命令为止的运行时间和执行时间</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ps -eo pid,comm,etime,time\n    PID COMMAND             ELAPSED     TIME\n      1 systemd         32-07:08:42 00:00:38\n      2 kthreadd        32-07:08:42 00:00:01\n      3 rcu_gp          32-07:08:42 00:00:00\n      4 rcu_par_gp      32-07:08:42 00:00:00\n      6 kworker/0:0H-kb 32-07:08:42 00:00:00\n      9 mm_percpu_wq    32-07:08:42 00:00:00\n     10 ksoftirqd/0     32-07:08:42 00:04:46\n     11 rcu_sched       32-07:08:42 00:14:16\n     12 migration/0     32-07:08:42 00:00:15\n     13 idle_inject/0   32-07:08:42 00:00:00\n     14 cpuhp/0         32-07:08:42 00:00:00\n     15 cpuhp/1         32-07:08:42 00:00:00\n</code></pre></div>\n<h3 id=\"变更优先级\" style=\"position:relative;\"><a href=\"#%E5%8F%98%E6%9B%B4%E4%BC%98%E5%85%88%E7%BA%A7\" aria-label=\"变更优先级 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>变更优先级</h3>\n<p>nice()系统调用，可以设定进程的运行优先级</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ nice -n 5 echo hello\nHello\n\n# sar命令输出的%nice字段表示从默认值0更改为其他优先级后，进程运行时间所占的比例\n$ nice -n 5 python3 ./loop.py &amp;\n2895557\n$ sar -P ALL 1 1\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t10/31/2022 \t_x86_64_\t(2 CPU)\n\n09:31:03 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle\n09:31:04 PM     all      2.00     50.00      0.50      0.00      0.00     47.50\n09:31:04 PM       0      0.00    100.00      0.00      0.00      0.00      0.00\n09:31:04 PM       1      4.00      0.00      1.00      0.00      0.00     95.00\n\nAverage:        CPU     %user     %nice   %system   %iowait    %steal     %idle\nAverage:        all      2.00     50.00      0.50      0.00      0.00     47.50\nAverage:          0      0.00    100.00      0.00      0.00      0.00      0.00\nAverage:          1      4.00      0.00      1.00      0.00      0.00     95.00\n</code></pre></div>\n<p>taskset命令也是OS提供的调度器相关的程序，该命令请求被称为sched_setaffinity()的系统调用，将程序限定在指定的逻辑CPU上运行。</p>\n<h1 id=\"内存\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AD%98\" aria-label=\"内存 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存</h1>\n<h1 id=\"内存相关的统计信息\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF\" aria-label=\"内存相关的统计信息 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存相关的统计信息</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ free\n              total        used        free      shared  buff/cache   available\nMem:        4030588     1732532      155376        2828     2142680     1855968\nSwap:             0           0           0\n</code></pre></div>\n<ul>\n<li>total：系统搭载的物理内存总量。</li>\n<li>free：表面上的可用内存量</li>\n<li>buff/cache：缓冲区缓存与页面缓存占用的内存。当系统的可用内存量(free字段的值)减少时，可通过内核将它们释放出来</li>\n<li>available：实际的可用内存量。本字段的值为free字段的值加上内存不足时内核中可释放的内存量。可释放的内存指缓冲区与页面缓存中的大部分内存，以及内核中除此以外的用于其他地方的部分内存</li>\n</ul>\n<p><img src=\"Linux%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84%2087ed1df30fa64c79bfce432f71de4fec/IMG_8543.heic\" alt=\"IMG_8543.HEIC\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># sar -r 可以指定采集周期\n# free == kbmemfree\n# buff/cache == kbbuffers/kbcached\n$ sar -r 1\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t10/31/2022 \t_x86_64_\t(2 CPU)\n\n10:18:44 PM kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n10:18:45 PM    161236   1863956   1640924     40.71     83088   1458708   3659512     90.79   1570012    625348      3436\n10:18:46 PM    162440   1865220   1639636     40.68     83088   1458768   3659512     90.79   1569772    625392      3540\n10:18:47 PM    162780   1865560   1639296     40.67     83088   1458768   3659512     90.79   1568956    625388      3540\n10:18:48 PM    162008   1864804   1640024     40.69     83088   1458772   3660052     90.81   1569068    625388      3544\n10:18:49 PM    161400   1864276   1640556     40.70     83088   1458848   3660052     90.81   1570620    625456      3308\n</code></pre></div>\n<h2 id=\"内存不足out-of-memory-oom\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3out-of-memory-oom\" aria-label=\"内存不足out of memory oom permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存不足(Out Of Memory) OOM</h2>\n<p>在进入OOM状态，内存管理系统会运行被称为OOM Killer的可怕功能。它会选择合适的进程并将其强制终止，以释放出更多的内存。</p>\n<p>sysctl的vm.panic_on_oom默认是0，在发生OOM时运行OOM Killer，</p>\n<p>变更为1，在发生OOM时强制关闭系统</p>\n<h2 id=\"简单的内存分配\" style=\"position:relative;\"><a href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\" aria-label=\"简单的内存分配 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>简单的内存分配</h2>\n<ul>\n<li>在创建进程时</li>\n<li>在创建完进程后，动态分配内存时</li>\n</ul>\n<h2 id=\"内存分配的问题\" style=\"position:relative;\"><a href=\"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"内存分配的问题 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>内存分配的问题</h2>\n<ul>\n<li>内存碎片化\n<ul>\n<li>在进程被创建后，如果不断重复执行获取与释放内存的操作，就会引发内存碎片化的问题</li>\n</ul>\n</li>\n<li>访问用于其他用途的内存区域\n<ul>\n<li>进程均可通过内存地址来访问内核或其他进程所使用的内存</li>\n</ul>\n</li>\n<li>难以执行多任务\n<ul>\n<li>再次启动同一个程序并尝试映射到内存，就会引发问题</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"虚拟内存\" style=\"position:relative;\"><a href=\"#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98\" aria-label=\"虚拟内存 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>虚拟内存</h2>\n<p>虚拟内存使进程无法直接访问系统上搭载的内存，取而代之的是通过虚拟地址间接访问。</p>\n<p>进程可以看见的是虚拟地址，系统上搭载的内存的实际地址称为物理地址</p>\n<p><img src=\"Linux%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84%2087ed1df30fa64c79bfce432f71de4fec/IMG_8559.heic\" alt=\"IMG_8559.HEIC\"></p>\n<p>readelf</p>\n<p>cat /proc/pid/maps输出地址是虚拟地址。</p>\n<h3 id=\"页表\" style=\"position:relative;\"><a href=\"#%E9%A1%B5%E8%A1%A8\" aria-label=\"页表 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>页表</h3>\n<p>通过保存在内核使用的内存中的<strong>页表</strong>，可以完成从虚拟页表到物理地址的转换。</p>\n<p>在页表中，一个页面对应的数据条目称为<strong>页表项</strong>。</p>\n<p>如果进程访问的地址没有关联物理内存，则在CPU上会发生<strong>缺页中断</strong>。</p>\n<p>缺页中断可以中止正在执行的命令，并启动内核中的缺页中断机构处理，内核中的缺页中断机构检测到非法访问，</p>\n<p>向进程发送<strong>SIGSEGV</strong>信号，接收到该信号的进程通常被强制结束运行。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cat segv.c\n#include&lt;stdio.h>\n#include&lt;stdlib.h>\n\nint main(void){\n    int *p = NULL;\n    puts(\"before invalid access\");\n    *p = 0;\n    puts(\"after invalid access\");\n    exit(EXIT_SUCCESS);\n}\n$ cc -o segv segv.c\n$ ./segv\nbefore invalid access\nSegmentation fault (core dumped)\n# 由于访问了非法的地址，所以触发了SIGSEGV信号，\n</code></pre></div>\n<h3 id=\"为进程分配内存\" style=\"position:relative;\"><a href=\"#%E4%B8%BA%E8%BF%9B%E7%A8%8B%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98\" aria-label=\"为进程分配内存 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>为进程分配内存</h3>\n<p>读取进程可执行文件，代码段的大小(100)+数据段的大小(200)=300，在物理内存上划分300的区域，将其分配给进程，并把代码和数据复制过去。</p>\n<p>Linux的物理内存分配使用的是更复杂的请求分页方法。</p>\n<p>在复制完成后，创建进程的页表，并把虚拟地址映射到物理地址。</p>\n<p>最后，从指定的地址开始运行即可。</p>\n<h3 id=\"在动态分配内存时\" style=\"position:relative;\"><a href=\"#%E5%9C%A8%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E6%97%B6\" aria-label=\"在动态分配内存时 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在动态分配内存时</h3>\n<p>如果进程请求更多内存，内核将为其分配新的内存，创建相应的页表。</p>\n<h3 id=\"利用上层进行内存分配\" style=\"position:relative;\"><a href=\"#%E5%88%A9%E7%94%A8%E4%B8%8A%E5%B1%82%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\" aria-label=\"利用上层进行内存分配 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>利用上层进行内存分配</h3>\n<p>C语言标准库中有一个名为malloc()的函数，用于获取内存，在Linux中，这个函数底层调用了mmap()函数。</p>\n<p>图5-20待补充</p>\n<p>mmap是以页为单位获取内存，malloc是以字节为单位获取内存，为了以字节为单位获取内存，glibc事先通过系统调用mmap向内核申请一大块内存区作为内存池。</p>\n<p>当程序调用malloc时，会从池子里划分相应的大小，如果内存池耗尽，glibc会申请mmap申请新的内存空间</p>\n<h2 id=\"实验\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E9%AA%8C\" aria-label=\"实验 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实验</h2>\n<p>显示进程的内存映射信息(/proc/pid/maps)</p>\n<p>mmap()函数会通过系统调用向Linux内核请求新的内存。</p>\n<p>system()函数会执行第1个参数中指定的命令</p>\n<p>mmap.c</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h2 id=\"虚拟内存的应用\" style=\"position:relative;\"><a href=\"#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8\" aria-label=\"虚拟内存的应用 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>虚拟内存的应用</h2>\n<ul>\n<li>文件映射</li>\n<li>请求分页</li>\n<li>使用写时复制快速创建进程</li>\n<li>Swap</li>\n<li>多级页面</li>\n<li>标准大页</li>\n</ul>\n<h3 id=\"文件映射\" style=\"position:relative;\"><a href=\"#%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84\" aria-label=\"文件映射 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件映射</h3>\n<p>使用mmap()函数，将文件的内容读取到内存中，然后将这个内存区域映射到虚拟地址空间。</p>\n<p>通过¥memcpy()函数把数据复制到内存映射的区域，同样能更新文件内容</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ echo hello > testfile\n$ cat filemap.c\n#include &lt;sys/types.h>\n#include &lt;sys/stat.h>\n#include &lt;fcntl.h>\n#include &lt;unistd.h>\n#include &lt;sys/mman.h>\n#include &lt;stdio.h>\n#include &lt;stdlib.h>\n#include &lt;string.h>\n#include &lt;err.h>\n\n#define BUFFER_SIZE\t1000\n#define ALLOC_SIZE\t(100*1024*1024)\n\nstatic char command[BUFFER_SIZE];\nstatic char file_contents[BUFFER_SIZE];\nstatic char overwrite_data[] = \"HELLO\";\n\nint main(void)\n{\n\tpid_t pid;\n\n\tpid = getpid();\n\tsnprintf(command, BUFFER_SIZE, \"cat /proc/%d/maps\", pid);\n\n\tputs(\"*** memory map before mapping file ***\");\n\tfflush(stdout);\n\tsystem(command);\n\n\tint fd;\n\tfd = open(\"testfile\", O_RDWR);\n\tif (fd == -1)\n\t\terr(EXIT_FAILURE, \"open() failed\");\n\n\tchar * file_contents;\n\tfile_contents = mmap(NULL, ALLOC_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);\n\tif (file_contents == (void *) -1) {\n\t\twarn(\"mmap() failed\");\n\t\tgoto close_file;\n\t}\n\n\tputs(\"\");\n\tprintf(\"*** succeeded to map file: address = %p; size = 0x%x ***\\\\n\",\n\t\tfile_contents, ALLOC_SIZE);\n\n\tputs(\"\");\n\tputs(\"*** memory map after mapping file ***\");\n\tfflush(stdout);\n\tsystem(command);\n\n\tputs(\"\");\n\tprintf(\"*** file contents before overwrite mapped region: %s\", file_contents);\n\n\t// 覆写映射区域\n\tmemcpy(file_contents, overwrite_data, strlen(overwrite_data));\n\n\tputs(\"\");\n\tprintf(\"*** overwritten mapped region with: %s\\\\n\", file_contents);\n\n\tif (munmap(file_contents, ALLOC_SIZE) == -1)\n\t\twarn(\"munmap() failed\");\nclose_file:\n\tif (close(fd) == -1)\n\t\twarn(\"close() failed\");\n\texit(EXIT_SUCCESS);\n}\n$ cc -o filemap filemap.c\n$ ./filemap\n$ cat testfile\nHELLO\n</code></pre></div>\n<h3 id=\"请求分页机\" style=\"position:relative;\"><a href=\"#%E8%AF%B7%E6%B1%82%E5%88%86%E9%A1%B5%E6%9C%BA\" aria-label=\"请求分页机 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>请求分页机</h3>\n<p>在请求分页的机制中，对于虚拟地址空间的各个页面，只有在进程初次访问页面时，才会为这个页面分配内存。</p>\n<p>页面的状态：未分配进程、已分配给进程且已分配物理内存、已分配给进程尚未分配物理内存</p>\n<p>处理流程：</p>\n<ol>\n<li>进程访问入口点</li>\n<li>CPU参照页表，筛选出入口点所属的页面中哪些虚拟地址未关联物理地址</li>\n<li>在CPU中引发缺页中断</li>\n<li>内核中的缺页中断机构，为步骤1中访问的页面分配物理内存，并更新其页表。</li>\n<li>回到用户模式，继续运行进程</li>\n</ol>\n<p>实验：</p>\n<p>demand-paging</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>结论：</p>\n<ul>\n<li>在已获取内存但尚未访问的这段时间内，虚拟内存量比获取前增加相应数量，但物理内存不变</li>\n<li>开始访问后，物理内存量会增加，虚拟内存量不变</li>\n<li>在访问结束后，物理内存量比开始访问前多了相应数量</li>\n</ul>\n<p>ps -eo中的vsz/rss/maj_flt/min_flt分别对应虚拟内存量/已分配物理内存量/创建进程后发生缺页中断的总次数</p>\n<p>sar -B 1 的fault/s 表示每秒发生缺页中断次数</p>\n<h2 id=\"写时复制\" style=\"position:relative;\"><a href=\"#%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6\" aria-label=\"写时复制 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写时复制</h2>\n<p>在发起fork()系统调用时，并非把父进程的所有内存数据复制给子进程，而是仅仅复制了父进程的页表。</p>\n<p>只发生读取操作，父进程与子进程都可以访问共享的物理页面。</p>\n<p>当其中一方打算更改任意页面的数据时，则按照下面的流程解除共享。</p>\n<ol>\n<li>由于没有写入权限，所以在尝试写入时，CPU将引发缺页中断</li>\n<li>CPU转换到内核模式，缺页中断机构开始运行</li>\n<li>对于被访问的页面，缺页中断机构将复制一份放到别的地方，然后将其分配给尝试写入的进程，并根据请求更新其中的内容</li>\n<li>为父进程和子进程双方更新与已解除共享的页面对应的页表项\n<ol>\n<li>对于执行写入的一方，将其页面项重新连接到新分配的物理页面，并赋予写入权限</li>\n<li>对于另一方，也只需对其页表项重新赋予写入权限即可</li>\n</ol>\n</li>\n</ol>\n<p>因为物理内存不是在fork()系统调用时进行复制的，而是在尝试写入时才进行复制的，所以这个机制被称为写时复制(Copy on Write，CoW)</p>\n<p>cow.c</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h2 id=\"swap\" style=\"position:relative;\"><a href=\"#swap\" aria-label=\"swap permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swap</h2>\n<p>将外部存储器的一部分容量暂时当作内存使用。即在系统物理内存不足的情况下，当出现获取物理内存申请时，物理内存的一部分将被保存到外部存储器，从而空出充足的可用内存。这个用于保存页面的区域被称为交换分区。</p>\n<p>交换分区有系统管理员在构建系统时进行设置。</p>\n<p>换出：在没有空闲的内存，内核会将正在使用的物理内存中的一部分页面保存到交换分区。</p>\n<p>换入：内核从交换分区中将先前换出的页面重新拿回到物理内存</p>\n<p>换入与换出这两个处理统称为交换。</p>\n<p>换入换出也被称为页面调入与页面调出。</p>\n<p>需要访问外部存储器的缺页中断叫硬性页缺失</p>\n<p>无需访问外部存储器的缺页中断叫软性页缺失</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 查看系统交换分区的信息\n$ swapon --show\n\n# swap这一行是交换分区的信息，\n$ free\n              total        used        free      shared  buff/cache   available\nMem:        4030588     1672344      155496        2816     2202748     1915148\nSwap:             0           0           0\n\n# 查看系统中是否发生了交换\n$ sar -W 1\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t11/03/2022 \t_x86_64_\t(2 CPU)\n\n09:33:12 PM  pswpin/s pswpout/s\n09:33:13 PM      0.00      0.00\n09:33:14 PM      0.00      0.00\n09:33:15 PM      0.00      0.00\n\n# 当发生交换时，如果kbsswpused%一直增加，就非常危险\n$ sar -S\n</code></pre></div>\n<h2 id=\"多级页表\" style=\"position:relative;\"><a href=\"#%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8\" aria-label=\"多级页表 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多级页表</h2>\n<p>x86_64架构的页表采用多级结构</p>\n<p>sar -r ALL中的kbpgtbl字段查看页表所使用的物理内存量</p>\n<h2 id=\"标准大页\" style=\"position:relative;\"><a href=\"#%E6%A0%87%E5%87%86%E5%A4%A7%E9%A1%B5\" aria-label=\"标准大页 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>标准大页</h2>\n<p>问题：</p>\n<ol>\n<li>随着进程的虚拟内存使用量增加，进程页表使用的物理内存量也会增加</li>\n<li>fork()系统调用的执行速度变慢，因为写时复制，需要复制一份同样的页表</li>\n</ol>\n<p>标准大页是比普通的页面更大的页，利用这种页面，能有效减少进程页表所需的内存量</p>\n<p>在C语言中，通过mmap()函数的flags参数MAP_HUGETAB标志，可以获取标准大页</p>\n<h3 id=\"透明大页\" style=\"position:relative;\"><a href=\"#%E9%80%8F%E6%98%8E%E5%A4%A7%E9%A1%B5\" aria-label=\"透明大页 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>透明大页</h3>\n<p>当虚拟地址空间连续多个4KB页面符合特定条件时，通过透明大页机制能将它们自动转换成一个大页</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cat /sys/kernel/mm/transparent_hugepage/enabled\nalways [madvise] never\n# always表示启用\n# never表示未启用\n# 当设定madvise时，表示仅对有madvise()系统调用设定的内存区域启动透明大页机制\n\n# 启用\n$ sudo su\n$ echo always > /sys/kernel/mm/transparent_hugepage/enabled\n</code></pre></div>\n<h1 id=\"存储层次\" style=\"position:relative;\"><a href=\"#%E5%AD%98%E5%82%A8%E5%B1%82%E6%AC%A1\" aria-label=\"存储层次 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>存储层次</h1>\n<h2 id=\"高速缓存\" style=\"position:relative;\"><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98\" aria-label=\"高速缓存 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>高速缓存</h2>\n<p>高速缓存抹平寄存器与内存之间的性能差距</p>\n<p>高速缓存是把内存上的数据缓存到高速缓存上，</p>\n<p>高速缓存以缓存块为单位处理数据</p>\n<p>高速缓存分层机构，分为L1 L2 L3</p>\n<p>计算机运作流程</p>\n<ol>\n<li>根据指令，将数据从内存读取到寄存器</li>\n<li>基于寄存器上的数据进行运算</li>\n<li>把运算结果写入内存</li>\n</ol>\n<h3 id=\"高速缓存工作方式\" style=\"position:relative;\"><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F\" aria-label=\"高速缓存工作方式 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>高速缓存工作方式</h3>\n<h3 id=\"读\" style=\"position:relative;\"><a href=\"#%E8%AF%BB\" aria-label=\"读 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>读</h3>\n<p>从内存往寄存器里读取数据的是欧，数据先被发送到高速缓存，再被送往寄存器</p>\n<h3 id=\"写\" style=\"position:relative;\"><a href=\"#%E5%86%99\" aria-label=\"写 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写</h3>\n<p>寄存器重新写回到高速缓存上，会有脏标记，这些被标记的数据会在某个指定的时间点，通过后台处理写入内存</p>\n<h3 id=\"高速缓存不足时\" style=\"position:relative;\"><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E4%B8%8D%E8%B6%B3%E6%97%B6\" aria-label=\"高速缓存不足时 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>高速缓存不足时</h3>\n<p>高速缓存不足的时候，需要销毁一个现有的缓存块。</p>\n<h3 id=\"多级缓存\" style=\"position:relative;\"><a href=\"#%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98\" aria-label=\"多级缓存 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多级缓存</h3>\n<p>构成分层结构的各高速缓存分别名为L1、L2、L3</p>\n<p>高速缓存信息可以通过<code class=\"language-text\">/sys/devices/system/cpu/cpu0/cache/index0</code> 目录下查看</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ubuntu@VM-4-14-ubuntu:/sys/devices/system/cpu/cpu0/cache/index1$ ls -l\ntotal 0\n-r--r--r-- 1 root root 4096 Oct 25 22:27 coherency_line_size # 缓存块大小\n-r--r--r-- 1 root root 4096 Oct 25 22:27 id\n-r--r--r-- 1 root root 4096 Oct 25 22:27 level\n-r--r--r-- 1 root root 4096 Oct 25 22:27 number_of_sets\n-r--r--r-- 1 root root 4096 Oct 25 22:27 physical_line_partition\n-r--r--r-- 1 root root 4096 Oct 25 22:27 shared_cpu_list # 共享该缓存的逻辑CPU列表\n-r--r--r-- 1 root root 4096 Oct 25 22:27 shared_cpu_map\n-r--r--r-- 1 root root 4096 Oct 25 22:26 size # 容量大小\n-r--r--r-- 1 root root 4096 Oct 25 22:26 type # Data代表数据，Code代表仅缓存指令模块，Unified代表两者都能缓存\n-rw-r--r-- 1 root root 4096 Oct 25 22:27 uevent\n-r--r--r-- 1 root root 4096 Oct 25 22:27 ways_of_associativity\n</code></pre></div>\n<p>cache.c</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h2 id=\"页面缓存\" style=\"position:relative;\"><a href=\"#%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98\" aria-label=\"页面缓存 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>页面缓存</h2>\n<p>与CPU访问内存的速度比起来，访问外部存储器的速度慢了几个数量级</p>\n<p>内核中用于填补这一速度差的机构称为页面缓存。</p>\n<p>页面缓存是把外部存储器上的文件数据缓存到内存上。</p>\n<p>页面缓存以页为单位处理数据</p>\n<h2 id=\"流程\" style=\"position:relative;\"><a href=\"#%E6%B5%81%E7%A8%8B\" aria-label=\"流程 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>流程</h2>\n<h3 id=\"读取\" style=\"position:relative;\"><a href=\"#%E8%AF%BB%E5%8F%96\" aria-label=\"读取 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>读取</h3>\n<ol>\n<li>当进程读取文件时，内核并不会直接把文件数据复制到进程的内存中</li>\n<li>把数据复制到内核内存上的页面缓存区域</li>\n<li>然后把数据复制到进程的内存中</li>\n</ol>\n<p>内核内存有一个管理区域，缓存了缓存文件的相关信息</p>\n<p>当再次读取同样的数据，将直接返回页面缓存中的数据</p>\n<p><img src=\"Linux%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84%2087ed1df30fa64c79bfce432f71de4fec/IMG_8559%201.heic\" alt=\"IMG_8559.HEIC\"></p>\n<h3 id=\"写入\" style=\"position:relative;\"><a href=\"#%E5%86%99%E5%85%A5\" aria-label=\"写入 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写入</h3>\n<ol>\n<li>在进程写入数据后，内核会把数据写入到页面缓存中，</li>\n<li>管理区域会把这些数据对应的条目添加一个标记</li>\n<li>其内容比外部存储器中的数据新</li>\n<li>这些被标记的页面称为脏页</li>\n<li>之后脏页中的数据将在指定时间通过内核的后台处理反射到外部存储器上，脏标记也会被去除</li>\n</ol>\n<h3 id=\"同步写入\" style=\"position:relative;\"><a href=\"#%E5%90%8C%E6%AD%A5%E5%86%99%E5%85%A5\" aria-label=\"同步写入 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>同步写入</h3>\n<p>强制断电会导致页面缓存中的脏页丢失。</p>\n<p>可以通过open()调用打开文件时将flag参数设定为O_SYNC，这样执行write()系统调用，都会在页面缓存写入数据时，将数据同步写入外部存储器</p>\n<h2 id=\"读取文件的实验\" style=\"position:relative;\"><a href=\"#%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9E%E9%AA%8C\" aria-label=\"读取文件的实验 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>读取文件的实验</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 创建名为testfile的文件，大小为1G\n$ dd if=/dev/zero of=testfile oflag=direct bs=1M count=1K\n1024+0 records in\n1024+0 records out\n1073741824 bytes (1.1 GB, 1.0 GiB) copied, 10.8637 s, 98.8 MB/s\n\n$ du -h testfile\n1.1G\ttestfile\n$ free\n              total        used        free      shared  buff/cache   available\nMem:        4030588     1666084      411560        2816     1952944     1913192\nSwap:             0           0           0\nubuntu@VM-4-14-ubuntu:~$ time cat testfile >/dev/null\n\nreal\t0m5.536s\nuser\t0m0.007s\nsys\t  0m0.401s\nubuntu@VM-4-14-ubuntu:~$ free\n              total        used        free      shared  buff/cache   available\nMem:        4030588     1663684      126148        2816     2240756     1912192\nSwap:             0           0           0\n# 被缓存住了，\nubuntu@VM-4-14-ubuntu:~$ time cat testfile >/dev/null\n\nreal\t0m0.153s\nuser\t0m0.000s\nsys\t0m0.134s\nubuntu@VM-4-14-ubuntu:~$ free\n              total        used        free      shared  buff/cache   available\nMem:        4030588     1663404      124228        2816     2242956     1912456\nSwap:             0           0           0\n\n# kbcached字段获取页面缓存的总量\n$ sar -r 1\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t11/03/2022 \t_x86_64_\t(2 CPU)\n\n10:37:51 PM kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n10:37:52 PM   1139244   1912708   1581652     39.24     57504    960928   3607924     89.51   1190080    422880      5784\nAverage:      1139168   1912651   1581724     39.24     57504    960947   3608207     89.52   1190105    422896      5803\nubuntu@VM-4-14-ubuntu:~$ time cat testfile >/dev/null\n\nreal\t0m6.215s\nuser\t0m0.000s\nsys\t0m0.446s\nubuntu@VM-4-14-ubuntu:~$ sar -r 1\nLinux 5.4.0-42-generic (VM-4-14-ubuntu) \t11/03/2022 \t_x86_64_\t(2 CPU)\n\n10:38:09 PM kbmemfree   kbavail kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n10:38:10 PM    114656   1913100   1581276     39.23     55016   1988440   3607924     89.51   1185372   1452820      5988\n</code></pre></div>\n<h3 id=\"采集统计信息\" style=\"position:relative;\"><a href=\"#%E9%87%87%E9%9B%86%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF\" aria-label=\"采集统计信息 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>采集统计信息</h3>\n<p><a href=\"http://read-twice.sh/\">read-twice.sh</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\nrm -f testfile\n\necho \"$(date): start file creation\"\ndd if=/dev/zero of=testfile oflag=direct bs=1M count=1K\necho \"$(date): end file creation\"\n\necho \"$(date): sleep 3 seconds\"\nsleep 3\n\necho \"$(date): start 1st read\"\ncat testfile >/dev/null\necho \"$(date): end 1st read\"\n\necho \"$(date): sleep 3 seconds\"\nsleep 3\n\necho \"$(date): start 2st read\"\ncat testfile >/dev/null\n\necho \"$(date): end 2nd read\"\n\nrm -f testfile</code></pre></div>\n<p>外部存储器的I/O吞吐量，sar -d -p 1 rd_sec/s 和wr_sec/s分别表示每秒读取数据量和写入数据量，这两个数值以名为扇区的单元为单位</p>\n<p>页面调入与页面调出 sar -B 1</p>\n<h3 id=\"写入文件的实验\" style=\"position:relative;\"><a href=\"#%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9E%E9%AA%8C\" aria-label=\"写入文件的实验 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写入文件的实验</h3>\n<p><a href=\"http://write.sh/\">write.sh</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\nrm -f testfile\n\necho \"$(date): start write (file creation)\"\ndd if=/dev/zero of=testfile bs=1M count=1K\necho \"$(date): end write\"\n\nrm -f testfile</code></pre></div>\n<h3 id=\"页面缓存调优参数\" style=\"position:relative;\"><a href=\"#%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0\" aria-label=\"页面缓存调优参数 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>页面缓存调优参数</h3>\n<ol>\n<li>\n<p>脏页回写周期可以通过sysctl中的vm.dirty_writeback_centisecs参数更改</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sysctl vm.dirty_writeback_centisecs\nvm.dirty_writeback_centisecs = 500\n# 设置为0，回写操作禁止\n# 单位里秒(1/100秒)\n</code></pre></div>\n</li>\n<li>\n<p>内存不足时防止产生剧烈的回写负荷</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sysctl vm.dirty_background_ratio\nvm.dirty_background_ratio = 10\n# 当脏页占用的内存量与系统搭载的内存总量超过百分比值\n</code></pre></div>\n</li>\n<li>\n<p>当脏页内存占比超过vm.dirty_ratio，将阻塞进程的写入</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sysctl vm.dirty_ratio\nvm.dirty_ratio = 20\n</code></pre></div>\n</li>\n<li>\n<p>清除页面缓存</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ echo 3 > /proc/sys/vm/drop_caches\n</code></pre></div>\n</li>\n</ol>\n<h1 id=\"文件系统\" style=\"position:relative;\"><a href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"文件系统 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件系统</h1>\n<p>Linux在访问外部存储器中的数据时，通常不会直接访问，而是通过更加便捷的方式-文件系统来进行访问</p>\n<h2 id=\"linux的文件系统\" style=\"position:relative;\"><a href=\"#linux%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"linux的文件系统 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux的文件系统</h2>\n<p>为了分门别类地整理文件，Linux的文件系统提供了一种可以收纳其他文件的特殊文件，这种文件称为目录。</p>\n<h3 id=\"面向用户的访问接口\" style=\"position:relative;\"><a href=\"#%E9%9D%A2%E5%90%91%E7%94%A8%E6%88%B7%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3\" aria-label=\"面向用户的访问接口 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>面向用户的访问接口</h3>\n<ul>\n<li>创建与删除文件: create()、unlink()</li>\n<li>打开与关闭文件: open()、close()</li>\n<li>从已打开的文件中读取数据: read()</li>\n<li>往已打开的文件中写入数据: write()</li>\n<li>将已打开的文件移动到指定位置: lseek()</li>\n<li>除了以上这些操作以外依赖于文件系统的特殊处理: ioctl()</li>\n</ul>\n<h3 id=\"读取文件流程\" style=\"position:relative;\"><a href=\"#%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E6%B5%81%E7%A8%8B\" aria-label=\"读取文件流程 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>读取文件流程</h3>\n<ol>\n<li>执行内核中的全部文件系统的通用处理，并判断作为操作对象的文件保存在哪个文件系统上</li>\n<li>调用文件系统专有的处理，并执行与请求的系统调用对应的处理。</li>\n<li>在读写数据时，调用设备驱动程序执行操作</li>\n<li>有设备驱动程序执行数据的读写操作</li>\n</ol>\n<h2 id=\"数据与元数据\" style=\"position:relative;\"><a href=\"#%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%85%83%E6%95%B0%E6%8D%AE\" aria-label=\"数据与元数据 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数据与元数据</h2>\n<ul>\n<li>数据：用户创建的文档、图片、视频和程序等数据内容</li>\n<li>元数据：文件的名称，文件在外部存储器中的位置和文件大小等辅助信息\n<ul>\n<li>种类：用于判断文件是保存数据的普通文件，还是目录或其他类型的文件信息</li>\n<li>时间信息：包括文件的创建时间、最后一次访问的时间，以及最后一次修改的时间</li>\n<li>权限信息：表明该文件允许哪些用户访问</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"容量限制\" style=\"position:relative;\"><a href=\"#%E5%AE%B9%E9%87%8F%E9%99%90%E5%88%B6\" aria-label=\"容量限制 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>容量限制</h2>\n<p>通过磁盘配额(quota)功能限制各种用途的文件系统容量</p>\n<p>磁盘配额类型：</p>\n<ul>\n<li>用户配额：限制作为文件所有者的用户的可用容量 (ext4/XFS)</li>\n<li>目录配额：限制特定目录的可用容量 (ext4/XFS)</li>\n<li>子卷配额：限制文件系统内名为子卷的单元的可用容量。(Btrfs)</li>\n</ul>\n<h2 id=\"文件系统不一致\" style=\"position:relative;\"><a href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8D%E4%B8%80%E8%87%B4\" aria-label=\"文件系统不一致 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件系统不一致</h2>\n<p>在外部存储器读写文件系统的数据时被强制切段电源的情况</p>\n<p>防止文件系统不一致的技术有很多，常用的是<strong>日志</strong>与<strong>写时复制</strong></p>\n<p>ext4与XFS利用的是日志，Btrfs利用的是写时复制</p>\n<h3 id=\"日志\" style=\"position:relative;\"><a href=\"#%E6%97%A5%E5%BF%97\" aria-label=\"日志 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>日志</h3>\n<p>日志功能在文件系统中提供一个名为<strong>日志区域</strong>的特殊区域。</p>\n<p>日志区域是用户无法识别的元数据</p>\n<ol>\n<li>把更新所需的原子操作的概要(日志)暂时写入日志区域。</li>\n<li>基于日志区域中的内容，进行文件系统的更新</li>\n</ol>\n<p>如果在更新日志记录的过程中被强制切断电源，那只需丢弃日志区域的数据即可</p>\n<p>如果在实际执行数据更新的过程中，被强制切断电源，那只需执行一遍日志记录</p>\n<h3 id=\"写时复制-1\" style=\"position:relative;\"><a href=\"#%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6-1\" aria-label=\"写时复制 1 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写时复制</h3>\n<p>ext4和XFS等传统的文件系统上，文件一旦被创建，其位置原则上不会发生变化，即使更新文件内容，也只会在外部存储器的同一位置写入更新的数据。</p>\n<p>Btrfs等利用写时复制的文件系统上，创建文件后的每一次更新处理都会把数据写入不同的位置。</p>\n<p>如果只创建了文件时，被强制切断电源，再重启后删除新创建的文件</p>\n<p>如果创建了文件也进行链接时，被强制切断电源，再重启后删除未处理完的数据</p>\n<h2 id=\"文件的种类\" style=\"position:relative;\"><a href=\"#%E6%96%87%E4%BB%B6%E7%9A%84%E7%A7%8D%E7%B1%BB\" aria-label=\"文件的种类 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件的种类</h2>\n<ol>\n<li>保护用户数据的普通文件</li>\n<li>保存其他文件的目录</li>\n<li>设备文件</li>\n</ol>\n<p>Linux会将自身所处的硬件系统上几乎所有的设备呈现为文件形式，因此在Linux上，设备可以通过open()、read()、write()等系统调用进行访问。</p>\n<p>通常情况下，只有root用户可以访问设备文件</p>\n<h3 id=\"设备文件\" style=\"position:relative;\"><a href=\"#%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6\" aria-label=\"设备文件 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>设备文件</h3>\n<p>以文件形式存在的设备分为两种类型：字符设备与块设备</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 行首字母为c的是字符设备，为b的是块设备\n# 第5个字段是主设备号，第6个字段是次设备号\n$ ls -l /dev\ntotal 0\ncrw-r--r-- 1 root root     10, 235 11月  4 14:28 autofs\ndrwxr-xr-x 2 root root          80 11月  4 22:27 block\ndrwxr-xr-x 3 root root          60 11月  4 14:27 bus\ndrwxr-xr-x 2 root root        2640 11月  4 14:28 char\ncrw------- 1 root root      5,   1 11月  6 12:28 console\n</code></pre></div>\n<h3 id=\"字符设备\" style=\"position:relative;\"><a href=\"#%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87\" aria-label=\"字符设备 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>字符设备</h3>\n<p>write()系统调用：向终端输出数据</p>\n<p>read()系统调用：向终端输入数据</p>\n<ul>\n<li>终端</li>\n<li>键盘</li>\n<li>鼠标</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ps -ef |grep bash\nroot        5794    5793  0 17:45 pts/0    00:00:02 -bash\nroot       15970   15969  0 19:45 pts/1    00:00:00 -bash\nroot       15997   15996  0 19:46 pts/0    00:00:00 bash\nroot       16016   16015  0 19:48 pts/0    00:00:00 -bash\n$ echo \"hello\" > /dev/pts/0\nhello\n# 通过指定/dev/pts/1，可以往其他终端写入数据\necho hello > /dev/pts/1\n</code></pre></div>\n<h3 id=\"块设备\" style=\"position:relative;\"><a href=\"#%E5%9D%97%E8%AE%BE%E5%A4%87\" aria-label=\"块设备 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>块设备</h3>\n<p>除了能执行普通的读写操作外，还能进行随机访问，比较具有代表性的设备是HDD与SSD等外部存储器</p>\n<p>只需像读文件一样读写块设备的数据，即可访问外部存储器中指定的数据。</p>\n<p>直接操作块设备</p>\n<ul>\n<li>更新分区表(利用parted命令等)</li>\n<li>块设备级别的数据备份与还原(利用dd命令等)</li>\n<li>创建文件系统(利用各文件系统的mkfs命令等)</li>\n<li>挂载文件系统(利用mount命令等)</li>\n<li>fsck</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkfs.ext4 /dev/sdc7 # 创建一个ext4文件系统\nmount /dev/sdc7 /mnt/ # 挂载文件系统，\necho \"hello world\" > /mnt/testfile\nls /mnt/\ncat /mnt/testfile\nunmount /mnt\nstrings -t x /dev/sdc7 # 提取字符串信息\necho \"HELLO WORLD\" > testfile-overwrite\ndd if=testfile-overwiret of=/dev/sdc7 seek=$((0x803d000)) bs=1\n# 可以通过块设备更改数据\n</code></pre></div>\n<ul>\n<li>lost+found目录以及文件名testfile(元数据)</li>\n<li>testfile文件中的内容，字符串hello world(数据)</li>\n</ul>\n<h2 id=\"各种各样的文件系统\" style=\"position:relative;\"><a href=\"#%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"各种各样的文件系统 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>各种各样的文件系统</h2>\n<h3 id=\"基于内存的文件系统\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"基于内存的文件系统 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基于内存的文件系统</h3>\n<p>tmpfs是一种创建于内存上的文件系统，切断电源后消失，但是不需要访问外部存储器，所以能提高访问速度</p>\n<p>tmpfs通常被用于**/tmp<strong>和</strong>/var/run**</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mount |grep ^tmpfs\ntmpfs on /dev/shm type tmpfs (rw,nosuid,nodev)\ntmpfs on /run type tmpfs (rw,nosuid,nodev,mode=755)\ntmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,mode=755)\ntmpfs on /run/netns type tmpfs (rw,nosuid,nodev,mode=755)\ntmpfs on /run/user/0 type tmpfs (rw,nosuid,nodev,relatime,size=77536k,mode=700)\n</code></pre></div>\n<p>挂载时，通过size选项指定最大容量，在初次访问文件系统中的区域时，以页单位申请相应大小的内存。</p>\n<p>free中的shared字段表示实际占用的内存量</p>\n<h3 id=\"网络文件系统\" style=\"position:relative;\"><a href=\"#%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"网络文件系统 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>网络文件系统</h3>\n<p>Windows上的cifs文件系统</p>\n<p>Linux上的nfs文件系统</p>\n<h3 id=\"虚拟文件系统\" style=\"position:relative;\"><a href=\"#%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\" aria-label=\"虚拟文件系统 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>虚拟文件系统</h3>\n<ul>\n<li>\n<p>procfs</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/proc/cpuinfo CPU的相关信息\n/prod/diskstat 外部存储器的相关信息\n/proc/meminfo 内存的相关信息\n/proc/sys 内核的各种调优参数，与sysctl命令和/etc/sysctl.conf的调优参数一一对应\n</code></pre></div>\n<p>procfs用于获取系统上所有进程的信息，通常被挂载在/proc目录下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ls /proc/$$\narch_status  cgroup\t coredump_filter  exe\t   io\t      maps\t mountstats  oom_adj\t    patch_state  sched\t    smaps\t  statm    timers\nattr\t     clear_refs  cpuset\t\t  fd\t   limits     mem\t net\t     oom_score\t    personality  schedstat  smaps_rollup  status   timerslack_ns\nautogroup    cmdline\t cwd\t\t  fdinfo   loginuid   mountinfo  ns\t     oom_score_adj  projid_map\t sessionid  stack\t  syscall  uid_map\nauxv\t     comm\t environ\t  gid_map  map_files  mounts\t numa_maps   pagemap\t    root\t setgroups  stat\t  task\t   wchan\n\n# /proc/pid/maps: 进程的内存映射\n# /proc/pid/cmdline: 进程的命令行映射\n# /proc/pid/stat: 进程的状态，比如CPU时间、优先级、内存使用量\n</code></pre></div>\n</li>\n<li>\n<p>sysfs</p>\n<p>/sys/devices 设备的相关信息</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ls -l /sys/devices\ntotal 0\ndrwxr-xr-x  3 root root 0 Nov  6 20:21 breakpoint\ndrwxr-xr-x  3 root root 0 Nov  6 20:21 isa\ndrwxr-xr-x  4 root root 0 Nov  6 20:21 kprobe\ndrwxr-xr-x  6 root root 0 Nov  6 20:21 LNXSYSTM:00\ndrwxr-xr-x  5 root root 0 Nov  6 20:21 msr\ndrwxr-xr-x 16 root root 0 Nov  6 20:13 pci0000:00\ndrwxr-xr-x 10 root root 0 Nov  6 20:21 platform\ndrwxr-xr-x  8 root root 0 Nov  6 20:21 pnp0\ndrwxr-xr-x  3 root root 0 Nov  6 20:21 software\ndrwxr-xr-x 10 root root 0 Nov  6 20:13 system\ndrwxr-xr-x  3 root root 0 Nov  6 20:21 tracepoint\ndrwxr-xr-x  4 root root 0 Nov  6 20:21 uprobe\ndrwxr-xr-x 16 root root 0 Sep 29 13:54 virtual\n</code></pre></div>\n<p>/sys/fs 各种文件系统的相关信息</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ls -l /sys/fs\ntotal 0\ndrwxr-xr-x  2 root root   0 Nov  6 20:22 aufs\ndrwx-----T  2 root root   0 Sep 29 13:54 bpf\ndrwxr-xr-x  3 root root   0 Nov  6 20:22 btrfs\ndrwxr-xr-x 15 root root 380 Sep 29 13:54 cgroup\ndrwxr-xr-x  2 root root   0 Nov  6 20:22 ecryptfs\ndrwxr-xr-x  4 root root   0 Nov  6 20:22 ext4\ndrwxr-xr-x  3 root root   0 Sep 29 13:54 fuse\ndrwxr-x---  2 root root   0 Sep 29 13:54 pstore\n</code></pre></div>\n</li>\n<li>\n<p>cgroupfs</p>\n<p>用于限制单个进程或者多个进程组成的群组的资源使用量</p>\n<p>通常挂载在**/sys/fs/cgroup**下</p>\n<p>cpu：通过读写/sys/fs/cgroup/cpu目录下的文件进行控制</p>\n<p>内存：通过读写/sys/fs/cgroup/memory目录下的文件进行控制</p>\n</li>\n</ul>\n<h1 id=\"外部存储器\" style=\"position:relative;\"><a href=\"#%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8\" aria-label=\"外部存储器 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>外部存储器</h1>\n<h2 id=\"hdd的数据读写机制\" style=\"position:relative;\"><a href=\"#hdd%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99%E6%9C%BA%E5%88%B6\" aria-label=\"hdd的数据读写机制 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HDD的数据读写机制</h2>\n<p>HDD用磁性信息表示数据，并将这些数据记录在称为盘片的池畔上，</p>\n<p>HDD读写数据的单位时扇区</p>\n<p>HDD通过名为磁头的部件读写盘片上各个扇区的数据。</p>\n<h3 id=\"数据传输流程\" style=\"position:relative;\"><a href=\"#%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%B5%81%E7%A8%8B\" aria-label=\"数据传输流程 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数据传输流程</h3>\n<ol>\n<li>设备驱动程序将读写数据所需的信息传递给HDD，其中包含山区序列号、扇区数量以及访问类型(读取或写入)</li>\n<li>通过摆动次头摆臂并转动盘片，将磁头对准需要访问的扇区</li>\n<li>执行数据读写操作</li>\n<li>在执行读取的情况下，执行完HDD的读取处理就能结束数据传输</li>\n</ol>\n<h3 id=\"写入特性\" style=\"position:relative;\"><a href=\"#%E5%86%99%E5%85%A5%E7%89%B9%E6%80%A7\" aria-label=\"写入特性 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>写入特性</h3>\n<ul>\n<li>尽量将文件中的数据存放在连续的或者相近的区域上</li>\n<li>把针对连续区域的访问请求汇集到一次访问请求中</li>\n<li>对于文件，尽量以顺序访问的方式访问尽可能大的数据量</li>\n</ul>\n<h2 id=\"预读\" style=\"position:relative;\"><a href=\"#%E9%A2%84%E8%AF%BB\" aria-label=\"预读 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>预读</h2>\n<p>当程序访问了外部存储器上的某个区域后，很有可能继续访问紧跟在后面的区域，</p>\n<p>预读机制正是基于这样的推测，预先读取那些接下来可能被访问的区域</p>\n<h2 id=\"ssd\" style=\"position:relative;\"><a href=\"#ssd\" aria-label=\"ssd permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSD</h2>\n<p>在访问SSD上的数据时，不会发生任何机械处理，只需要执行电子处理即可完成访问。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#linux%E6%98%AF%E6%80%8E%E6%A0%B7%E5%B7%A5%E4%BD%9C%E7%9A%84\">Linux是怎样工作的</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\">准备工作</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\">系统调用</a></p>\n<ul>\n<li>\n<p><a href=\"#strace-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\">strace 查看系统调用</a></p>\n</li>\n<li>\n<p><a href=\"#sar\">sar</a></p>\n</li>\n<li>\n<p><a href=\"#c%E6%A0%87%E5%87%86%E5%BA%93\">C标准库</a></p>\n<ul>\n<li><a href=\"#ldd\">ldd</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86\">进程管理</a></p>\n<ul>\n<li>\n<p><a href=\"#%E5%88%9B%E5%BB%BA%E8%BF%9B%E7%A8%8B\">创建进程</a></p>\n</li>\n<li>\n<p><a href=\"#fork%E5%87%BD%E6%95%B0\">fork()函数</a></p>\n</li>\n<li>\n<p><a href=\"#execve%E5%87%BD%E6%95%B0\">execve()函数</a></p>\n<ul>\n<li><a href=\"#linux%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6\">linux可执行文件</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E5%99%A8\">进程调度器</a></p>\n<ul>\n<li>\n<p><a href=\"#%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2\">上下文切换</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81\">进程的状态</a></p>\n<ul>\n<li><a href=\"#%E5%A4%84%E4%BA%8E%E7%9D%A1%E7%9C%A0%E6%80%81%E7%9A%84%E4%BA%8B%E4%BB%B6\">处于睡眠态的事件</a></li>\n<li><a href=\"#%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2\">状态转换</a></li>\n<li><a href=\"#%E7%A9%BA%E9%97%B2%E7%8A%B6%E6%80%81\">空闲状态</a></li>\n<li><a href=\"#%E5%90%9E%E5%90%90%E9%87%8F%E4%B8%8E%E5%BB%B6%E8%BF%9F\">吞吐量与延迟</a></li>\n<li><a href=\"#%E7%8E%B0%E5%AE%9E%E4%B8%AD%E7%9A%84%E7%B3%BB%E7%BB%9F\">现实中的系统</a></li>\n<li><a href=\"#%E5%AD%98%E5%9C%A8%E5%A4%9A%E4%B8%AA%E9%80%BB%E8%BE%91cpu%E6%97%B6%E7%9A%84%E8%B0%83%E5%BA%A6\">存在多个逻辑CPU时的调度</a></li>\n<li><a href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E5%92%8C%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4\">运行时间和执行时间</a></li>\n<li><a href=\"#%E7%8E%B0%E5%AE%9E%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B\">现实中的进程</a></li>\n<li><a href=\"#%E5%8F%98%E6%9B%B4%E4%BC%98%E5%85%88%E7%BA%A7\">变更优先级</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%86%85%E5%AD%98\">内存</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9A%84%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF\">内存相关的统计信息</a></p>\n<ul>\n<li>\n<p><a href=\"#%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3out-of-memory-oom\">内存不足(Out Of Memory) OOM</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\">简单的内存分配</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98\">内存分配的问题</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98\">虚拟内存</a></p>\n<ul>\n<li><a href=\"#%E9%A1%B5%E8%A1%A8\">页表</a></li>\n<li><a href=\"#%E4%B8%BA%E8%BF%9B%E7%A8%8B%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98\">为进程分配内存</a></li>\n<li><a href=\"#%E5%9C%A8%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E6%97%B6\">在动态分配内存时</a></li>\n<li><a href=\"#%E5%88%A9%E7%94%A8%E4%B8%8A%E5%B1%82%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\">利用上层进行内存分配</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9E%E9%AA%8C\">实验</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8\">虚拟内存的应用</a></p>\n<ul>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84\">文件映射</a></li>\n<li><a href=\"#%E8%AF%B7%E6%B1%82%E5%88%86%E9%A1%B5%E6%9C%BA\">请求分页机</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6\">写时复制</a></p>\n</li>\n<li>\n<p><a href=\"#swap\">Swap</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%A4%9A%E7%BA%A7%E9%A1%B5%E8%A1%A8\">多级页表</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%A0%87%E5%87%86%E5%A4%A7%E9%A1%B5\">标准大页</a></p>\n<ul>\n<li><a href=\"#%E9%80%8F%E6%98%8E%E5%A4%A7%E9%A1%B5\">透明大页</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%AD%98%E5%82%A8%E5%B1%82%E6%AC%A1\">存储层次</a></p>\n<ul>\n<li>\n<p><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98\">高速缓存</a></p>\n<ul>\n<li><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F\">高速缓存工作方式</a></li>\n<li><a href=\"#%E8%AF%BB\">读</a></li>\n<li><a href=\"#%E5%86%99\">写</a></li>\n<li><a href=\"#%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E4%B8%8D%E8%B6%B3%E6%97%B6\">高速缓存不足时</a></li>\n<li><a href=\"#%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98\">多级缓存</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98\">页面缓存</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%B5%81%E7%A8%8B\">流程</a></p>\n<ul>\n<li><a href=\"#%E8%AF%BB%E5%8F%96\">读取</a></li>\n<li><a href=\"#%E5%86%99%E5%85%A5\">写入</a></li>\n<li><a href=\"#%E5%90%8C%E6%AD%A5%E5%86%99%E5%85%A5\">同步写入</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9E%E9%AA%8C\">读取文件的实验</a></p>\n<ul>\n<li><a href=\"#%E9%87%87%E9%9B%86%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF\">采集统计信息</a></li>\n<li><a href=\"#%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%9E%E9%AA%8C\">写入文件的实验</a></li>\n<li><a href=\"#%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0\">页面缓存调优参数</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">文件系统</a></p>\n<ul>\n<li>\n<p><a href=\"#linux%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">Linux的文件系统</a></p>\n<ul>\n<li><a href=\"#%E9%9D%A2%E5%90%91%E7%94%A8%E6%88%B7%E7%9A%84%E8%AE%BF%E9%97%AE%E6%8E%A5%E5%8F%A3\">面向用户的访问接口</a></li>\n<li><a href=\"#%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E6%B5%81%E7%A8%8B\">读取文件流程</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%85%83%E6%95%B0%E6%8D%AE\">数据与元数据</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%B9%E9%87%8F%E9%99%90%E5%88%B6\">容量限制</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%8D%E4%B8%80%E8%87%B4\">文件系统不一致</a></p>\n<ul>\n<li><a href=\"#%E6%97%A5%E5%BF%97\">日志</a></li>\n<li><a href=\"#%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6-1\">写时复制</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%96%87%E4%BB%B6%E7%9A%84%E7%A7%8D%E7%B1%BB\">文件的种类</a></p>\n<ul>\n<li><a href=\"#%E8%AE%BE%E5%A4%87%E6%96%87%E4%BB%B6\">设备文件</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87\">字符设备</a></li>\n<li><a href=\"#%E5%9D%97%E8%AE%BE%E5%A4%87\">块设备</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%90%84%E7%A7%8D%E5%90%84%E6%A0%B7%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">各种各样的文件系统</a></p>\n<ul>\n<li><a href=\"#%E5%9F%BA%E4%BA%8E%E5%86%85%E5%AD%98%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">基于内存的文件系统</a></li>\n<li><a href=\"#%E7%BD%91%E7%BB%9C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">网络文件系统</a></li>\n<li><a href=\"#%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F\">虚拟文件系统</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8\">外部存储器</a></p>\n<ul>\n<li>\n<p><a href=\"#hdd%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99%E6%9C%BA%E5%88%B6\">HDD的数据读写机制</a></p>\n<ul>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%B5%81%E7%A8%8B\">数据传输流程</a></li>\n<li><a href=\"#%E5%86%99%E5%85%A5%E7%89%B9%E6%80%A7\">写入特性</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A2%84%E8%AF%BB\">预读</a></p>\n</li>\n<li>\n<p><a href=\"#ssd\">SSD</a></p>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[读书笔记]Linux是怎样工作的","date":"2022-12-05"}}},"pageContext":{"slug":"/2022-12-05-how-linux-work"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}