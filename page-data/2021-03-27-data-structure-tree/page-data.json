{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-03-27-data-structure-tree/","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc Redcarpet -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#define-binary-tree-node\">Define Binary Tree Node</a></li>\n<li><a href=\"#create-a-binary-tree\">Create a Binary tree</a>\n<ul>\n<li><a href=\"#pre-order-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86\">Pre-order 前序遍历</a></li>\n<li><a href=\"#in-order-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86\">In-order 中序遍历</a></li>\n<li><a href=\"#post-order-%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86\">Post-order 后续遍历</a></li>\n</ul>\n</li>\n<li><a href=\"#binary-search-tree\">Binary search Tree</a>\n<ul>\n<li><a href=\"#time-complexity\">Time Complexity</a></li>\n<li><a href=\"#how-to-create-bst\">How to create BST</a></li>\n</ul>\n</li>\n<li><a href=\"#balanced-binary-tree\">Balanced binary tree</a></li>\n<li><a href=\"#key-to-tree-problems-recursion\">Key to tree problems: recursion</a>\n<ul>\n<li><a href=\"#traditional-way\">Traditional Way</a></li>\n<li><a href=\"#recursive-way\">Recursive way</a></li>\n</ul>\n</li>\n<li><a href=\"#templates\">Templates</a>\n<ul>\n<li><a href=\"#single-root\">Single root</a>\n<ul>\n<li><a href=\"#exercise\">Exercise</a></li>\n</ul>\n</li>\n<li><a href=\"#two-roots\">Two roots</a>\n<ul>\n<li><a href=\"#exercise\">Exercise</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1 id=\"前言\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-label=\"前言 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h1>\n<p><a href=\"https://www.youtube.com/watch?v=PbGl8_-bZxI&#x26;list=WL&#x26;index=38\">笔记</a>，感觉 up 主分享。代码都是用 golang 实现。</p>\n<h1 id=\"define-binary-tree-node\" style=\"position:relative;\"><a href=\"#define-binary-tree-node\" aria-label=\"define binary tree node permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Define Binary Tree Node</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">type TreeNode struct {\n \tVal   int\n \tLeft  *TreeNode\n \tRight *TreeNode\n}</code></pre></div>\n<h1 id=\"create-a-binary-tree\" style=\"position:relative;\"><a href=\"#create-a-binary-tree\" aria-label=\"create a binary tree permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a Binary tree</h1>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func NewBinaryTree() *TreeNode {\n\troot := &amp;TreeNode{Val: 1}\n\troot.Left = &amp;TreeNode{Val: 2}\n\troot.Right = &amp;TreeNode{Val: 3}\n\troot.Left.Left = &amp;TreeNode{Val: 4}\n\troot.Left.Left.Right = &amp;TreeNode{Val: 5}\n\troot.Right.Left = &amp;TreeNode{Val: 6}\n}</code></pre></div>\n<h2 id=\"pre-order-前序遍历\" style=\"position:relative;\"><a href=\"#pre-order-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86\" aria-label=\"pre order 前序遍历 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pre-order 前序遍历</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func PreOrder(root *TreeNode, ans *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tfmt.Println(root.Val)\n\t*ans = append(*ans, root.Val)\n\tPreOrder(root.Left, ans)\n\tPreOrder(root.Right, ans)\n}</code></pre></div>\n<h2 id=\"in-order-中序遍历\" style=\"position:relative;\"><a href=\"#in-order-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86\" aria-label=\"in order 中序遍历 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In-order 中序遍历</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func InOrder(root *TreeNode, ans *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tInOrder(root.Left, ans)\n\tfmt.Println(root.Val)\n\t*ans = append(*ans, root.Val)\n\tInOrder(root.Right, ans)\n}</code></pre></div>\n<h2 id=\"post-order-后续遍历\" style=\"position:relative;\"><a href=\"#post-order-%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86\" aria-label=\"post order 后续遍历 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Post-order 后续遍历</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func PostOrder(root *TreeNode, ans *[]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tPostOrder(root.Left, ans)\n\tPostOrder(root.Right, ans)\n\tfmt.Println(root.Val)\n\t*ans = append(*ans, root.Val)\n}\n</code></pre></div>\n<h1 id=\"binary-search-tree\" style=\"position:relative;\"><a href=\"#binary-search-tree\" aria-label=\"binary search tree permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binary search Tree</h1>\n<ul>\n<li>根节点大于左子数，小于右子数</li>\n<li>中序遍历得到有序的列表</li>\n</ul>\n<h2 id=\"time-complexity\" style=\"position:relative;\"><a href=\"#time-complexity\" aria-label=\"time complexity permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time Complexity</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">method</th>\n<th align=\"center\">average</th>\n<th align=\"center\">worst case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">insert</td>\n<td align=\"center\">O(logn)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">Search</td>\n<td align=\"center\">O(logn)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n<tr>\n<td align=\"center\">Delete</td>\n<td align=\"center\">O(logn)</td>\n<td align=\"center\">O(n)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"how-to-create-bst\" style=\"position:relative;\"><a href=\"#how-to-create-bst\" aria-label=\"how to create bst permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to create BST</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func NewBST(nums []int) *TreeNode {\n\tvar root *TreeNode\n\tfor _, num := range nums {\n\t\troot = insert(root, num)\n\t}\n\treturn root\n}\n\nfunc insert(root *TreeNode, val int) *TreeNode {\n\tif root == nil {\n\t\treturn &amp;TreeNode{Val: val}\n\t}\n\tif val &lt; root.Val {\n\t\troot.Left = insert(root.Left, val)\n\t} else {\n\t\troot.Right = insert(root.Right, val)\n\t}\n\treturn root\n}</code></pre></div>\n<h1 id=\"balanced-binary-tree\" style=\"position:relative;\"><a href=\"#balanced-binary-tree\" aria-label=\"balanced binary tree permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Balanced binary tree</h1>\n<p>TODO</p>\n<h1 id=\"key-to-tree-problems-recursion\" style=\"position:relative;\"><a href=\"#key-to-tree-problems-recursion\" aria-label=\"key to tree problems recursion permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key to tree problems: recursion</h1>\n<p>培养递归思维，视频中有个例子，查找树节点中值最大的，</p>\n<p>普通思路是先设定最小值，然后遍历整棵树，如果大于就修改最大值。</p>\n<p>递归思路先获取左子树的最大值，然后获取右子树的最大值，然后和根节点取最大值。</p>\n<h2 id=\"traditional-way\" style=\"position:relative;\"><a href=\"#traditional-way\" aria-label=\"traditional way permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Traditional Way</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">\nfunc FindMaxValTree(root *TreeNode) int {\n\t_max := math.MinInt16\n\ttraverse(root, &amp;_max)\n\treturn _max\n}\n\nfunc traverse(root *TreeNode, _max *int) {\n\tif root == nil {\n\t\treturn\n\t}\n\t*_max = max(root.Val, *_max)\n\ttraverse(root.Left, _max)\n\ttraverse(root.Right, _max)\n}</code></pre></div>\n<h2 id=\"recursive-way\" style=\"position:relative;\"><a href=\"#recursive-way\" aria-label=\"recursive way permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recursive way</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func FindMaxValTree2(root *TreeNode) int {\n\tif root == nil {\n\t\treturn math.MinInt16\n\t}\n\tmaxLeft := FindMaxValTree2(root.Left)\n\tmaxRight := FindMaxValTree2(root.Right)\n\tbigger := max(maxLeft, maxRight)\n\treturn max(bigger, root.Val)\n}\n</code></pre></div>\n<h1 id=\"templates\" style=\"position:relative;\"><a href=\"#templates\" aria-label=\"templates permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Templates</h1>\n<ul>\n<li>Single root/Two roots</li>\n<li>Time complexity: O(n) Space complexity: O(h)</li>\n</ul>\n<h2 id=\"single-root\" style=\"position:relative;\"><a href=\"#single-root\" aria-label=\"single root permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single root</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func solve(root){\n  if not root: return ...\n  if f(root): retunr ...\n  l = solve(root.left)\n  r = solve(root.right)\n  return g(root, l, r)\n}</code></pre></div>\n<h3 id=\"exercise\" style=\"position:relative;\"><a href=\"#exercise\" aria-label=\"exercise permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise</h3>\n<ul>\n<li>Leetcode 104 Maximum Depth of Binary Tree</li>\n<li>Leetcode 111 Minimun Depth of Binary Tree</li>\n<li>Leetcode 112 Path sum</li>\n</ul>\n<h2 id=\"two-roots\" style=\"position:relative;\"><a href=\"#two-roots\" aria-label=\"two roots permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Two roots</h2>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func solve(p, q){\n    if not p and not q{\n        return ...\n    }\n    if f(p, q): return ...\n    c1 = solve(p.left, q.right)\n    c2 = solve(p.left, q.right)\n    return g(p,q,c1,c2)\n}</code></pre></div>\n<h3 id=\"exercise-1\" style=\"position:relative;\"><a href=\"#exercise-1\" aria-label=\"exercise 1 permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise</h3>\n<ul>\n<li>Leetcode 100 Same Tree</li>\n<li>Leetcode 101 Symmetric Tree</li>\n<li>Leetcode 951 Equivalent Binary Trees</li>\n</ul>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=PbGl8_-bZxI&#x26;list=WL&#x26;index=38\">https://www.youtube.com/watch?v=PbGl8_-bZxI&#x26;list=WL&#x26;index=38</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></p>\n</li>\n<li>\n<p><a href=\"#define-binary-tree-node\">Define Binary Tree Node</a></p>\n</li>\n<li>\n<p><a href=\"#create-a-binary-tree\">Create a Binary tree</a></p>\n<ul>\n<li><a href=\"#pre-order-%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86\">Pre-order 前序遍历</a></li>\n<li><a href=\"#in-order-%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86\">In-order 中序遍历</a></li>\n<li><a href=\"#post-order-%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86\">Post-order 后续遍历</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#binary-search-tree\">Binary search Tree</a></p>\n<ul>\n<li><a href=\"#time-complexity\">Time Complexity</a></li>\n<li><a href=\"#how-to-create-bst\">How to create BST</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#balanced-binary-tree\">Balanced binary tree</a></p>\n</li>\n<li>\n<p><a href=\"#key-to-tree-problems-recursion\">Key to tree problems: recursion</a></p>\n<ul>\n<li><a href=\"#traditional-way\">Traditional Way</a></li>\n<li><a href=\"#recursive-way\">Recursive way</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#templates\">Templates</a></p>\n<ul>\n<li>\n<p><a href=\"#single-root\">Single root</a></p>\n<ul>\n<li><a href=\"#exercise\">Exercise</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#two-roots\">Two roots</a></p>\n<ul>\n<li><a href=\"#exercise-1\">Exercise</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#reference\">Reference</a></p>\n</li>\n</ul>","frontmatter":{"title":"数据结构之树","date":"2021-03-27"}}},"pageContext":{"slug":"/2021-03-27-data-structure-tree"}},"staticQueryHashes":["3649515864"],"slicesMap":{}}