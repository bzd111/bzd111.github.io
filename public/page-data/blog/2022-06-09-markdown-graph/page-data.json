{"componentChunkName":"component---src-templates-blog-js","path":"/blog/2022-06-09-markdown-graph","result":{"data":{"markdownRemark":{"html":"<!-- vim-markdown-toc GitLab -->\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#mermaid\">Mermaid</a>\n<ul>\n<li><a href=\"#flowchart\">Flowchart</a>\n<ul>\n<li><a href=\"#demo\">demo</a></li>\n</ul>\n</li>\n<li><a href=\"#sequence-diagram\">Sequence diagram</a>\n<ul>\n<li><a href=\"#demo-1\">demo</a></li>\n</ul>\n</li>\n<li><a href=\"#gantt-diagram\">Gantt diagram</a>\n<ul>\n<li><a href=\"#demo-2\">demo</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#plantuml\">PlantUML</a>\n<ul>\n<li><a href=\"#%E6%97%B6%E5%BA%8F%E5%9B%BE\">时序图</a></li>\n<li><a href=\"#demo-3\">demo</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B0%8F%E7%BB%93\">小结</a></li>\n<li><a href=\"#reference\">Reference</a></li>\n</ul>\n<!-- vim-markdown-toc -->\n<h1>前言</h1>\n<p>所谓一图胜千言，特别在开发过程中，一张架构图，流程图，可以清晰的展示项目的架构和流程。</p>\n<p>所以怎么画好一张图也是必修的软技能。</p>\n<p>本文主要介绍下 Mermaid 和 PlantUML</p>\n<h1>Mermaid</h1>\n<h2>Flowchart</h2>\n<p>流程图</p>\n<p>A-->B A 指向 B</p>\n<p>A-->C A 指向 C</p>\n<p>B-->D C-->D B、C 同时指向 D</p>\n<h3>demo</h3>\n<p>graph TD;</p>\n<p>A-->B;</p>\n<p>A-->C;</p>\n<p>B-->D;</p>\n<p>C-->D;</p>\n<pre><code>graph TD;\n\nA-->B;\n\nA-->C;\n\nB-->D;\n\nC-->D;\n</code></pre>\n<p>{} 表示判断框</p>\n<p>|| 表示条件</p>\n<p>graph TB</p>\n<p>Start(开始) --> Open[打开冰箱门]</p>\n<p>Open --> Put[把大象放进去]</p>\n<p>Put[把大象放进去] --> IsFit{\"冰箱小不小？\"}</p>\n<p>IsFit -->|不小| Close[把冰箱门关上]</p>\n<p>Close --> End(结束)</p>\n<p>IsFit -->|小| Change[换个大冰箱]</p>\n<p>Change --> Open</p>\n<pre><code>graph TB\n    Start(开始) --> Open[打开冰箱门]\n    Open --> Put[把大象放进去]\n    Put[把大象放进去] --> IsFit{\"冰箱小不小？\"}\n\n    IsFit -->|不小| Close[把冰箱门关上]\n    Close --> End(结束)\n\n    IsFit -->|小| Change[换个大冰箱]\n    Change --> Open\n</code></pre>\n<h2>Sequence diagram</h2>\n<p>序列图</p>\n<p>participant 参与者</p>\n<p>->> 实线连接</p>\n<p>-->> 虚线连接</p>\n<p>loop end 循环</p>\n<p>Note over(left/right of) participant 挂在参与者上的提示</p>\n<h3>demo</h3>\n<p>sequenceDiagram</p>\n<p>participant Alice</p>\n<p>participant Bob</p>\n<p>participant John(可以省略)</p>\n<p>Alice->>John: Hello John, how are you?</p>\n<p>loop Healthcheck</p>\n<p>John->>John: Fight against hypochondria</p>\n<p>end</p>\n<p>Note left of Bob: Rational thoughts <br/>prevail!</p>\n<p>John-->>Alice: Great!</p>\n<p>John->>Bob: How about you?</p>\n<p>Bob-->>John: Jolly good!</p>\n<pre><code>sequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note left of John: Rational thoughts &#x3C;br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n</code></pre>\n<h2>Gantt diagram</h2>\n<p>甘特图</p>\n<p>dateFormat YYYY-MM-DD 时间格式</p>\n<p>title 标题</p>\n<p>excludes 排除某个日期</p>\n<h3>demo</h3>\n<p>gantt</p>\n<p>dateFormat YYYY-MM-DD</p>\n<p>title Adding GANTT diagram to mermaid</p>\n<p>excludes weekdays 2014-01-10</p>\n<p>section A section</p>\n<p>Completed task :done, des1, 2014-01-06,2014-01-08</p>\n<p>Active task :active, des2, 2014-01-09, 3d</p>\n<p>Future task : des3, after des2, 5d</p>\n<p>Future task2 : des4, after des3, 5d</p>\n<pre><code>gantt\ndateFormat  YYYY-MM-DD\ntitle Adding GANTT diagram to mermaid\nexcludes weekdays 2014-01-10\n\nsection A section\nCompleted task            :done,    des1, 2014-01-06,2014-01-08\nActive task               :active,  des2, 2014-01-09, 3d\nFuture task               :         des3, after des2, 5d\nFuture task2               :         des4, after des3, 5d\n</code></pre>\n<h1>PlantUML</h1>\n<p>@startuml @enduml 成对出现，一前一后</p>\n<h2>时序图</h2>\n<p>与 Mermaid 的使用类似，-> 实现，--> 虚线，participant 来声明参与者</p>\n<p>如果参与者之间本身有连接的话，不需要显示申明</p>\n<pre><code>@startuml\nparticipant Foo\nAlice -> Bob: Authentication Request\nBob --> Alice: Authentication Response\n\nAlice -> Bob: Another authentication Request\nAlice &#x3C;-- Bob: Another authentication Response\n@enduml\n</code></pre>\n<pre><code class=\"language-plantuml\">@startuml\nparticipant Foo\nAlice -> Bob: Authentication Request\nBob --> Alice: Authentication Response\n\nAlice -> Bob: Another authentication Request\nAlice &#x3C;-- Bob: Another authentication Response\n@enduml\n</code></pre>\n<h2></h2>\n<p>actor 角色</p>\n<p>activate/deactivate</p>\n<p>#red 指定颜色</p>\n<h2>demo</h2>\n<p>@startuml</p>\n<p>skinparam backgroundColor #EEEBDC</p>\n<p>skinparam handwritten true</p>\n<p>actor Customer #red</p>\n<p>Customer -> \"login()\" : username &#x26; password</p>\n<p>\"login()\" -> Customer : session token</p>\n<p>activate \"login()\"</p>\n<p>Customer -> \"placeOrder()\" : session token, order info</p>\n<p>\"placeOrder()\" -> Customer : ok</p>\n<p>Customer -> \"logout()\"</p>\n<p>\"logout()\" -> Customer : ok</p>\n<p>deactivate \"login()\"</p>\n<p>@enduml</p>\n<pre><code class=\"language-plantuml\">@startuml\n    skinparam backgroundColor #EEEBDC\n    skinparam handwritten true\n    actor Customer  #red\n    Customer -> \"login()\" : username &#x26; password\n    \"login()\" -> Customer : session token\n    activate \"login()\"\n    Customer -> \"placeOrder()\" : session token, order info\n    \"placeOrder()\" -> Customer : ok\n    Customer -> \"logout()\"\n    \"logout()\" -> Customer : ok\n    deactivate \"login()\"\n@enduml\n</code></pre>\n<h1>小结</h1>\n<p>画图前建议先把下面两个 URL 先看一下</p>\n<p>本文只是简单整理下 Mermaid 和 PlantUML 提供的画图的能力，根据实际的项目，可以选择合适的图玩一玩</p>\n<p>PlantUML 相比 Mermaid，多了些内置的 actor 和颜色，更丰富。</p>\n<h1>Reference</h1>\n<ul>\n<li><a href=\"https://mermaid-js.github.io/mermaid/#/\">https://mermaid-js.github.io/mermaid/#/</a></li>\n<li><a href=\"https://plantuml.com/zh/\">https://plantuml.com/zh/</a></li>\n</ul>","frontmatter":{"date":"June 09, 2022","slug":"/blog/2022-06-09-markdown-graph","title":"画图"}}},"pageContext":{"slug":"/blog/2022-06-09-markdown-graph"}},"staticQueryHashes":["3649515864"]}